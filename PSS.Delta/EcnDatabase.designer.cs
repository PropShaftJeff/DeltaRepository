#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PSS.Delta
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Engineering")]
	public partial class EcnDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEcnCheck(EcnCheck instance);
    partial void UpdateEcnCheck(EcnCheck instance);
    partial void DeleteEcnCheck(EcnCheck instance);
    partial void InsertEcnEngineeringMaster(EcnEngineeringMaster instance);
    partial void UpdateEcnEngineeringMaster(EcnEngineeringMaster instance);
    partial void DeleteEcnEngineeringMaster(EcnEngineeringMaster instance);
    partial void InsertEcnEngineeringMasterMaterial(EcnEngineeringMasterMaterial instance);
    partial void UpdateEcnEngineeringMasterMaterial(EcnEngineeringMasterMaterial instance);
    partial void DeleteEcnEngineeringMasterMaterial(EcnEngineeringMasterMaterial instance);
    partial void InsertEcnEngineeringMasterOperation(EcnEngineeringMasterOperation instance);
    partial void UpdateEcnEngineeringMasterOperation(EcnEngineeringMasterOperation instance);
    partial void DeleteEcnEngineeringMasterOperation(EcnEngineeringMasterOperation instance);
    partial void InsertEcnHeader(EcnHeader instance);
    partial void UpdateEcnHeader(EcnHeader instance);
    partial void DeleteEcnHeader(EcnHeader instance);
    partial void InsertEcnInventoryOnHand(EcnInventoryOnHand instance);
    partial void UpdateEcnInventoryOnHand(EcnInventoryOnHand instance);
    partial void DeleteEcnInventoryOnHand(EcnInventoryOnHand instance);
    partial void InsertEcnOpenWorkOrder(EcnOpenWorkOrder instance);
    partial void UpdateEcnOpenWorkOrder(EcnOpenWorkOrder instance);
    partial void DeleteEcnOpenWorkOrder(EcnOpenWorkOrder instance);
    partial void InsertEcnPurchaseOrderLine(EcnPurchaseOrderLine instance);
    partial void UpdateEcnPurchaseOrderLine(EcnPurchaseOrderLine instance);
    partial void DeleteEcnPurchaseOrderLine(EcnPurchaseOrderLine instance);
    partial void InsertEcnPurchaseOrder(EcnPurchaseOrder instance);
    partial void UpdateEcnPurchaseOrder(EcnPurchaseOrder instance);
    partial void DeleteEcnPurchaseOrder(EcnPurchaseOrder instance);
    partial void InsertEcnSalesOrderLine(EcnSalesOrderLine instance);
    partial void UpdateEcnSalesOrderLine(EcnSalesOrderLine instance);
    partial void DeleteEcnSalesOrderLine(EcnSalesOrderLine instance);
    partial void InsertEcnSalesOrder(EcnSalesOrder instance);
    partial void UpdateEcnSalesOrder(EcnSalesOrder instance);
    partial void DeleteEcnSalesOrder(EcnSalesOrder instance);
    partial void InsertEcnStandardCheck(EcnStandardCheck instance);
    partial void UpdateEcnStandardCheck(EcnStandardCheck instance);
    partial void DeleteEcnStandardCheck(EcnStandardCheck instance);
    partial void InsertEcnWorkOrderMaterial(EcnWorkOrderMaterial instance);
    partial void UpdateEcnWorkOrderMaterial(EcnWorkOrderMaterial instance);
    partial void DeleteEcnWorkOrderMaterial(EcnWorkOrderMaterial instance);
    partial void InsertEcnWorkOrderOperation(EcnWorkOrderOperation instance);
    partial void UpdateEcnWorkOrderOperation(EcnWorkOrderOperation instance);
    partial void DeleteEcnWorkOrderOperation(EcnWorkOrderOperation instance);
    #endregion
		
		public EcnDatabaseDataContext() : 
				base(global::PSS.Delta.Properties.Settings.Default.EngineeringConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EcnCheck> EcnChecks
		{
			get
			{
				return this.GetTable<EcnCheck>();
			}
		}
		
		public System.Data.Linq.Table<EcnEngineeringMaster> EcnEngineeringMasters
		{
			get
			{
				return this.GetTable<EcnEngineeringMaster>();
			}
		}
		
		public System.Data.Linq.Table<EcnEngineeringMasterMaterial> EcnEngineeringMasterMaterials
		{
			get
			{
				return this.GetTable<EcnEngineeringMasterMaterial>();
			}
		}
		
		public System.Data.Linq.Table<EcnEngineeringMasterOperation> EcnEngineeringMasterOperations
		{
			get
			{
				return this.GetTable<EcnEngineeringMasterOperation>();
			}
		}
		
		public System.Data.Linq.Table<EcnHeader> EcnHeaders
		{
			get
			{
				return this.GetTable<EcnHeader>();
			}
		}
		
		public System.Data.Linq.Table<EcnInventoryOnHand> EcnInventoryOnHands
		{
			get
			{
				return this.GetTable<EcnInventoryOnHand>();
			}
		}
		
		public System.Data.Linq.Table<EcnOpenWorkOrder> EcnOpenWorkOrders
		{
			get
			{
				return this.GetTable<EcnOpenWorkOrder>();
			}
		}
		
		public System.Data.Linq.Table<EcnPurchaseOrderLine> EcnPurchaseOrderLines
		{
			get
			{
				return this.GetTable<EcnPurchaseOrderLine>();
			}
		}
		
		public System.Data.Linq.Table<EcnPurchaseOrder> EcnPurchaseOrders
		{
			get
			{
				return this.GetTable<EcnPurchaseOrder>();
			}
		}
		
		public System.Data.Linq.Table<EcnSalesOrderLine> EcnSalesOrderLines
		{
			get
			{
				return this.GetTable<EcnSalesOrderLine>();
			}
		}
		
		public System.Data.Linq.Table<EcnSalesOrder> EcnSalesOrders
		{
			get
			{
				return this.GetTable<EcnSalesOrder>();
			}
		}
		
		public System.Data.Linq.Table<EcnStandardCheck> EcnStandardChecks
		{
			get
			{
				return this.GetTable<EcnStandardCheck>();
			}
		}
		
		public System.Data.Linq.Table<EcnWorkOrderMaterial> EcnWorkOrderMaterials
		{
			get
			{
				return this.GetTable<EcnWorkOrderMaterial>();
			}
		}
		
		public System.Data.Linq.Table<EcnWorkOrderOperation> EcnWorkOrderOperations
		{
			get
			{
				return this.GetTable<EcnWorkOrderOperation>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnChecks")]
	public partial class EcnCheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EcnId;
		
		private int _StandardCheckId;
		
		private bool _Completed;
		
		private string _Notes;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
		private EntityRef<EcnStandardCheck> _EcnStandardCheck;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnStandardCheckIdChanging(int value);
    partial void OnStandardCheckIdChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnCheck()
		{
			this._EcnHeader = default(EntityRef<EcnHeader>);
			this._EcnStandardCheck = default(EntityRef<EcnStandardCheck>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardCheckId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int StandardCheckId
		{
			get
			{
				return this._StandardCheckId;
			}
			set
			{
				if ((this._StandardCheckId != value))
				{
					if (this._EcnStandardCheck.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStandardCheckIdChanging(value);
					this.SendPropertyChanging();
					this._StandardCheckId = value;
					this.SendPropertyChanged("StandardCheckId");
					this.OnStandardCheckIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnCheck", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnChecks.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnChecks.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnStandardCheck_EcnCheck", Storage="_EcnStandardCheck", ThisKey="StandardCheckId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnStandardCheck EcnStandardCheck
		{
			get
			{
				return this._EcnStandardCheck.Entity;
			}
			set
			{
				EcnStandardCheck previousValue = this._EcnStandardCheck.Entity;
				if (((previousValue != value) 
							|| (this._EcnStandardCheck.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnStandardCheck.Entity = null;
						previousValue.EcnChecks.Remove(this);
					}
					this._EcnStandardCheck.Entity = value;
					if ((value != null))
					{
						value.EcnChecks.Add(this);
						this._StandardCheckId = value.Id;
					}
					else
					{
						this._StandardCheckId = default(int);
					}
					this.SendPropertyChanged("EcnStandardCheck");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnEngineeringMaster")]
	public partial class EcnEngineeringMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _EngMasterRecordId;
		
		private string _EngId;
		
		private int _EcnId;
		
		private string _MasterRevision;
		
		private string _StartingDescription;
		
		private string _EndingDescription;
		
		private string _StartingDrawingId;
		
		private string _EndingDrawingId;
		
		private string _StartingRevision;
		
		private string _EndingRevision;
		
		private System.Nullable<short> _StartingNumPages;
		
		private System.Nullable<short> _EndingNumPages;
		
		private System.Nullable<short> _StartingGlobalRank;
		
		private System.Nullable<short> _EndingGlobalRank;
		
		private string _StartingSpecifications;
		
		private string _EndingSpecifications;
		
		private string _StartingNotes;
		
		private string _EndingNotes;
		
		private System.Nullable<System.DateTime> _LastSaved;
		
		private System.Nullable<System.DateTime> _StartingDate;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnEngineeringMasterOperation> _EcnEngineeringMasterOperations;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEngMasterRecordIdChanging(string value);
    partial void OnEngMasterRecordIdChanged();
    partial void OnEngIdChanging(string value);
    partial void OnEngIdChanged();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnMasterRevisionChanging(string value);
    partial void OnMasterRevisionChanged();
    partial void OnStartingDescriptionChanging(string value);
    partial void OnStartingDescriptionChanged();
    partial void OnEndingDescriptionChanging(string value);
    partial void OnEndingDescriptionChanged();
    partial void OnStartingDrawingIdChanging(string value);
    partial void OnStartingDrawingIdChanged();
    partial void OnEndingDrawingIdChanging(string value);
    partial void OnEndingDrawingIdChanged();
    partial void OnStartingRevisionChanging(string value);
    partial void OnStartingRevisionChanged();
    partial void OnEndingRevisionChanging(string value);
    partial void OnEndingRevisionChanged();
    partial void OnStartingNumPagesChanging(System.Nullable<short> value);
    partial void OnStartingNumPagesChanged();
    partial void OnEndingNumPagesChanging(System.Nullable<short> value);
    partial void OnEndingNumPagesChanged();
    partial void OnStartingGlobalRankChanging(System.Nullable<short> value);
    partial void OnStartingGlobalRankChanged();
    partial void OnEndingGlobalRankChanging(System.Nullable<short> value);
    partial void OnEndingGlobalRankChanged();
    partial void OnStartingSpecificationsChanging(string value);
    partial void OnStartingSpecificationsChanged();
    partial void OnEndingSpecificationsChanging(string value);
    partial void OnEndingSpecificationsChanged();
    partial void OnStartingNotesChanging(string value);
    partial void OnStartingNotesChanged();
    partial void OnEndingNotesChanging(string value);
    partial void OnEndingNotesChanged();
    partial void OnLastSavedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSavedChanged();
    partial void OnStartingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartingDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnEngineeringMaster()
		{
			this._EcnEngineeringMasterOperations = new EntitySet<EcnEngineeringMasterOperation>(new Action<EcnEngineeringMasterOperation>(this.attach_EcnEngineeringMasterOperations), new Action<EcnEngineeringMasterOperation>(this.detach_EcnEngineeringMasterOperations));
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngMasterRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EngMasterRecordId
		{
			get
			{
				return this._EngMasterRecordId;
			}
			set
			{
				if ((this._EngMasterRecordId != value))
				{
					this.OnEngMasterRecordIdChanging(value);
					this.SendPropertyChanging();
					this._EngMasterRecordId = value;
					this.SendPropertyChanged("EngMasterRecordId");
					this.OnEngMasterRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngId", DbType="NVarChar(80) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EngId
		{
			get
			{
				return this._EngId;
			}
			set
			{
				if ((this._EngId != value))
				{
					this.OnEngIdChanging(value);
					this.SendPropertyChanging();
					this._EngId = value;
					this.SendPropertyChanged("EngId");
					this.OnEngIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasterRevision", DbType="NVarChar(80) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MasterRevision
		{
			get
			{
				return this._MasterRevision;
			}
			set
			{
				if ((this._MasterRevision != value))
				{
					this.OnMasterRevisionChanging(value);
					this.SendPropertyChanging();
					this._MasterRevision = value;
					this.SendPropertyChanged("MasterRevision");
					this.OnMasterRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingDescription", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string StartingDescription
		{
			get
			{
				return this._StartingDescription;
			}
			set
			{
				if ((this._StartingDescription != value))
				{
					this.OnStartingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._StartingDescription = value;
					this.SendPropertyChanged("StartingDescription");
					this.OnStartingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingDescription", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string EndingDescription
		{
			get
			{
				return this._EndingDescription;
			}
			set
			{
				if ((this._EndingDescription != value))
				{
					this.OnEndingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EndingDescription = value;
					this.SendPropertyChanged("EndingDescription");
					this.OnEndingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingDrawingId", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string StartingDrawingId
		{
			get
			{
				return this._StartingDrawingId;
			}
			set
			{
				if ((this._StartingDrawingId != value))
				{
					this.OnStartingDrawingIdChanging(value);
					this.SendPropertyChanging();
					this._StartingDrawingId = value;
					this.SendPropertyChanged("StartingDrawingId");
					this.OnStartingDrawingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingDrawingId", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string EndingDrawingId
		{
			get
			{
				return this._EndingDrawingId;
			}
			set
			{
				if ((this._EndingDrawingId != value))
				{
					this.OnEndingDrawingIdChanging(value);
					this.SendPropertyChanging();
					this._EndingDrawingId = value;
					this.SendPropertyChanged("EndingDrawingId");
					this.OnEndingDrawingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingRevision", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string StartingRevision
		{
			get
			{
				return this._StartingRevision;
			}
			set
			{
				if ((this._StartingRevision != value))
				{
					this.OnStartingRevisionChanging(value);
					this.SendPropertyChanging();
					this._StartingRevision = value;
					this.SendPropertyChanged("StartingRevision");
					this.OnStartingRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingRevision", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string EndingRevision
		{
			get
			{
				return this._EndingRevision;
			}
			set
			{
				if ((this._EndingRevision != value))
				{
					this.OnEndingRevisionChanging(value);
					this.SendPropertyChanging();
					this._EndingRevision = value;
					this.SendPropertyChanged("EndingRevision");
					this.OnEndingRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingNumPages", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> StartingNumPages
		{
			get
			{
				return this._StartingNumPages;
			}
			set
			{
				if ((this._StartingNumPages != value))
				{
					this.OnStartingNumPagesChanging(value);
					this.SendPropertyChanging();
					this._StartingNumPages = value;
					this.SendPropertyChanged("StartingNumPages");
					this.OnStartingNumPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingNumPages", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> EndingNumPages
		{
			get
			{
				return this._EndingNumPages;
			}
			set
			{
				if ((this._EndingNumPages != value))
				{
					this.OnEndingNumPagesChanging(value);
					this.SendPropertyChanging();
					this._EndingNumPages = value;
					this.SendPropertyChanged("EndingNumPages");
					this.OnEndingNumPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingGlobalRank", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> StartingGlobalRank
		{
			get
			{
				return this._StartingGlobalRank;
			}
			set
			{
				if ((this._StartingGlobalRank != value))
				{
					this.OnStartingGlobalRankChanging(value);
					this.SendPropertyChanging();
					this._StartingGlobalRank = value;
					this.SendPropertyChanged("StartingGlobalRank");
					this.OnStartingGlobalRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingGlobalRank", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> EndingGlobalRank
		{
			get
			{
				return this._EndingGlobalRank;
			}
			set
			{
				if ((this._EndingGlobalRank != value))
				{
					this.OnEndingGlobalRankChanging(value);
					this.SendPropertyChanging();
					this._EndingGlobalRank = value;
					this.SendPropertyChanged("EndingGlobalRank");
					this.OnEndingGlobalRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingSpecifications", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StartingSpecifications
		{
			get
			{
				return this._StartingSpecifications;
			}
			set
			{
				if ((this._StartingSpecifications != value))
				{
					this.OnStartingSpecificationsChanging(value);
					this.SendPropertyChanging();
					this._StartingSpecifications = value;
					this.SendPropertyChanged("StartingSpecifications");
					this.OnStartingSpecificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingSpecifications", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EndingSpecifications
		{
			get
			{
				return this._EndingSpecifications;
			}
			set
			{
				if ((this._EndingSpecifications != value))
				{
					this.OnEndingSpecificationsChanging(value);
					this.SendPropertyChanging();
					this._EndingSpecifications = value;
					this.SendPropertyChanged("EndingSpecifications");
					this.OnEndingSpecificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingNotes", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StartingNotes
		{
			get
			{
				return this._StartingNotes;
			}
			set
			{
				if ((this._StartingNotes != value))
				{
					this.OnStartingNotesChanging(value);
					this.SendPropertyChanging();
					this._StartingNotes = value;
					this.SendPropertyChanged("StartingNotes");
					this.OnStartingNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingNotes", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EndingNotes
		{
			get
			{
				return this._EndingNotes;
			}
			set
			{
				if ((this._EndingNotes != value))
				{
					this.OnEndingNotesChanging(value);
					this.SendPropertyChanging();
					this._EndingNotes = value;
					this.SendPropertyChanged("EndingNotes");
					this.OnEndingNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSaved", DbType="DateTime2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastSaved
		{
			get
			{
				return this._LastSaved;
			}
			set
			{
				if ((this._LastSaved != value))
				{
					this.OnLastSavedChanging(value);
					this.SendPropertyChanging();
					this._LastSaved = value;
					this.SendPropertyChanged("LastSaved");
					this.OnLastSavedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingDate", DbType="DateTime2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> StartingDate
		{
			get
			{
				return this._StartingDate;
			}
			set
			{
				if ((this._StartingDate != value))
				{
					this.OnStartingDateChanging(value);
					this.SendPropertyChanging();
					this._StartingDate = value;
					this.SendPropertyChanged("StartingDate");
					this.OnStartingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnEngineeringMaster_EcnEngineeringMasterOperation", Storage="_EcnEngineeringMasterOperations", ThisKey="Id", OtherKey="EcnEngMasterId")]
		public EntitySet<EcnEngineeringMasterOperation> EcnEngineeringMasterOperations
		{
			get
			{
				return this._EcnEngineeringMasterOperations;
			}
			set
			{
				this._EcnEngineeringMasterOperations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnEngineeringMaster", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnEngineeringMasters.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnEngineeringMasters.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnEngineeringMasterOperations(EcnEngineeringMasterOperation entity)
		{
			this.SendPropertyChanging();
			entity.EcnEngineeringMaster = this;
		}
		
		private void detach_EcnEngineeringMasterOperations(EcnEngineeringMasterOperation entity)
		{
			this.SendPropertyChanging();
			entity.EcnEngineeringMaster = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnEngineeringMasterMaterials")]
	public partial class EcnEngineeringMasterMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MaterialRecordId;
		
		private int _EcnMasterOperationId;
		
		private string _PartNumberBefore;
		
		private string _PartNumberAfter;
		
		private string _DescriptionBefore;
		
		private string _DescriptionAfter;
		
		private System.Nullable<int> _SeqNoBefore;
		
		private System.Nullable<int> _SeqNoAfter;
		
		private System.Nullable<int> _PieceNoBefore;
		
		private System.Nullable<int> _PieceNoAfter;
		
		private System.Nullable<decimal> _QtyPerBefore;
		
		private System.Nullable<decimal> _QtyPerAfter;
		
		private string _SpecificationsBefore;
		
		private string _SpecificationsAfter;
		
		private string _NotesBefore;
		
		private string _NotesAfter;
		
		private string _DrawingIdBefore;
		
		private string _DrawingIdAfter;
		
		private string _RevisionBefore;
		
		private string _RevisionAfter;
		
		private System.Nullable<short> _NumberOfPagesBefore;
		
		private System.Nullable<short> _NumberOfPagesAfter;
		
		private string _DrawingFileBefore;
		
		private string _DrawingFileAfter;
		
		private string _UomBefore;
		
		private string _UomAfter;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<EcnEngineeringMasterOperation> _EcnEngineeringMasterOperation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMaterialRecordIdChanging(string value);
    partial void OnMaterialRecordIdChanged();
    partial void OnEcnMasterOperationIdChanging(int value);
    partial void OnEcnMasterOperationIdChanged();
    partial void OnPartNumberBeforeChanging(string value);
    partial void OnPartNumberBeforeChanged();
    partial void OnPartNumberAfterChanging(string value);
    partial void OnPartNumberAfterChanged();
    partial void OnDescriptionBeforeChanging(string value);
    partial void OnDescriptionBeforeChanged();
    partial void OnDescriptionAfterChanging(string value);
    partial void OnDescriptionAfterChanged();
    partial void OnSeqNoBeforeChanging(System.Nullable<int> value);
    partial void OnSeqNoBeforeChanged();
    partial void OnSeqNoAfterChanging(System.Nullable<int> value);
    partial void OnSeqNoAfterChanged();
    partial void OnPieceNoBeforeChanging(System.Nullable<int> value);
    partial void OnPieceNoBeforeChanged();
    partial void OnPieceNoAfterChanging(System.Nullable<int> value);
    partial void OnPieceNoAfterChanged();
    partial void OnQtyPerBeforeChanging(System.Nullable<decimal> value);
    partial void OnQtyPerBeforeChanged();
    partial void OnQtyPerAfterChanging(System.Nullable<decimal> value);
    partial void OnQtyPerAfterChanged();
    partial void OnSpecificationsBeforeChanging(string value);
    partial void OnSpecificationsBeforeChanged();
    partial void OnSpecificationsAfterChanging(string value);
    partial void OnSpecificationsAfterChanged();
    partial void OnNotesBeforeChanging(string value);
    partial void OnNotesBeforeChanged();
    partial void OnNotesAfterChanging(string value);
    partial void OnNotesAfterChanged();
    partial void OnDrawingIdBeforeChanging(string value);
    partial void OnDrawingIdBeforeChanged();
    partial void OnDrawingIdAfterChanging(string value);
    partial void OnDrawingIdAfterChanged();
    partial void OnRevisionBeforeChanging(string value);
    partial void OnRevisionBeforeChanged();
    partial void OnRevisionAfterChanging(string value);
    partial void OnRevisionAfterChanged();
    partial void OnNumberOfPagesBeforeChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesBeforeChanged();
    partial void OnNumberOfPagesAfterChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesAfterChanged();
    partial void OnDrawingFileBeforeChanging(string value);
    partial void OnDrawingFileBeforeChanged();
    partial void OnDrawingFileAfterChanging(string value);
    partial void OnDrawingFileAfterChanged();
    partial void OnUomBeforeChanging(string value);
    partial void OnUomBeforeChanged();
    partial void OnUomAfterChanging(string value);
    partial void OnUomAfterChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnEngineeringMasterMaterial()
		{
			this._EcnEngineeringMasterOperation = default(EntityRef<EcnEngineeringMasterOperation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MaterialRecordId
		{
			get
			{
				return this._MaterialRecordId;
			}
			set
			{
				if ((this._MaterialRecordId != value))
				{
					this.OnMaterialRecordIdChanging(value);
					this.SendPropertyChanging();
					this._MaterialRecordId = value;
					this.SendPropertyChanged("MaterialRecordId");
					this.OnMaterialRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnMasterOperationId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnMasterOperationId
		{
			get
			{
				return this._EcnMasterOperationId;
			}
			set
			{
				if ((this._EcnMasterOperationId != value))
				{
					if (this._EcnEngineeringMasterOperation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnMasterOperationIdChanging(value);
					this.SendPropertyChanging();
					this._EcnMasterOperationId = value;
					this.SendPropertyChanged("EcnMasterOperationId");
					this.OnEcnMasterOperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumberBefore", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string PartNumberBefore
		{
			get
			{
				return this._PartNumberBefore;
			}
			set
			{
				if ((this._PartNumberBefore != value))
				{
					this.OnPartNumberBeforeChanging(value);
					this.SendPropertyChanging();
					this._PartNumberBefore = value;
					this.SendPropertyChanged("PartNumberBefore");
					this.OnPartNumberBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumberAfter", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string PartNumberAfter
		{
			get
			{
				return this._PartNumberAfter;
			}
			set
			{
				if ((this._PartNumberAfter != value))
				{
					this.OnPartNumberAfterChanging(value);
					this.SendPropertyChanging();
					this._PartNumberAfter = value;
					this.SendPropertyChanged("PartNumberAfter");
					this.OnPartNumberAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionBefore
		{
			get
			{
				return this._DescriptionBefore;
			}
			set
			{
				if ((this._DescriptionBefore != value))
				{
					this.OnDescriptionBeforeChanging(value);
					this.SendPropertyChanging();
					this._DescriptionBefore = value;
					this.SendPropertyChanged("DescriptionBefore");
					this.OnDescriptionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionAfter
		{
			get
			{
				return this._DescriptionAfter;
			}
			set
			{
				if ((this._DescriptionAfter != value))
				{
					this.OnDescriptionAfterChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAfter = value;
					this.SendPropertyChanged("DescriptionAfter");
					this.OnDescriptionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoBefore", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoBefore
		{
			get
			{
				return this._SeqNoBefore;
			}
			set
			{
				if ((this._SeqNoBefore != value))
				{
					this.OnSeqNoBeforeChanging(value);
					this.SendPropertyChanging();
					this._SeqNoBefore = value;
					this.SendPropertyChanged("SeqNoBefore");
					this.OnSeqNoBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoAfter", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoAfter
		{
			get
			{
				return this._SeqNoAfter;
			}
			set
			{
				if ((this._SeqNoAfter != value))
				{
					this.OnSeqNoAfterChanging(value);
					this.SendPropertyChanging();
					this._SeqNoAfter = value;
					this.SendPropertyChanged("SeqNoAfter");
					this.OnSeqNoAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceNoBefore", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PieceNoBefore
		{
			get
			{
				return this._PieceNoBefore;
			}
			set
			{
				if ((this._PieceNoBefore != value))
				{
					this.OnPieceNoBeforeChanging(value);
					this.SendPropertyChanging();
					this._PieceNoBefore = value;
					this.SendPropertyChanged("PieceNoBefore");
					this.OnPieceNoBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceNoAfter", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PieceNoAfter
		{
			get
			{
				return this._PieceNoAfter;
			}
			set
			{
				if ((this._PieceNoAfter != value))
				{
					this.OnPieceNoAfterChanging(value);
					this.SendPropertyChanging();
					this._PieceNoAfter = value;
					this.SendPropertyChanged("PieceNoAfter");
					this.OnPieceNoAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPerBefore", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPerBefore
		{
			get
			{
				return this._QtyPerBefore;
			}
			set
			{
				if ((this._QtyPerBefore != value))
				{
					this.OnQtyPerBeforeChanging(value);
					this.SendPropertyChanging();
					this._QtyPerBefore = value;
					this.SendPropertyChanged("QtyPerBefore");
					this.OnQtyPerBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPerAfter", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPerAfter
		{
			get
			{
				return this._QtyPerAfter;
			}
			set
			{
				if ((this._QtyPerAfter != value))
				{
					this.OnQtyPerAfterChanging(value);
					this.SendPropertyChanging();
					this._QtyPerAfter = value;
					this.SendPropertyChanged("QtyPerAfter");
					this.OnQtyPerAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationsBefore", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SpecificationsBefore
		{
			get
			{
				return this._SpecificationsBefore;
			}
			set
			{
				if ((this._SpecificationsBefore != value))
				{
					this.OnSpecificationsBeforeChanging(value);
					this.SendPropertyChanging();
					this._SpecificationsBefore = value;
					this.SendPropertyChanged("SpecificationsBefore");
					this.OnSpecificationsBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationsAfter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SpecificationsAfter
		{
			get
			{
				return this._SpecificationsAfter;
			}
			set
			{
				if ((this._SpecificationsAfter != value))
				{
					this.OnSpecificationsAfterChanging(value);
					this.SendPropertyChanging();
					this._SpecificationsAfter = value;
					this.SendPropertyChanged("SpecificationsAfter");
					this.OnSpecificationsAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesBefore", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NotesBefore
		{
			get
			{
				return this._NotesBefore;
			}
			set
			{
				if ((this._NotesBefore != value))
				{
					this.OnNotesBeforeChanging(value);
					this.SendPropertyChanging();
					this._NotesBefore = value;
					this.SendPropertyChanged("NotesBefore");
					this.OnNotesBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesAfter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NotesAfter
		{
			get
			{
				return this._NotesAfter;
			}
			set
			{
				if ((this._NotesAfter != value))
				{
					this.OnNotesAfterChanging(value);
					this.SendPropertyChanging();
					this._NotesAfter = value;
					this.SendPropertyChanged("NotesAfter");
					this.OnNotesAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdBefore", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdBefore
		{
			get
			{
				return this._DrawingIdBefore;
			}
			set
			{
				if ((this._DrawingIdBefore != value))
				{
					this.OnDrawingIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdBefore = value;
					this.SendPropertyChanged("DrawingIdBefore");
					this.OnDrawingIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdAfter", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdAfter
		{
			get
			{
				return this._DrawingIdAfter;
			}
			set
			{
				if ((this._DrawingIdAfter != value))
				{
					this.OnDrawingIdAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdAfter = value;
					this.SendPropertyChanged("DrawingIdAfter");
					this.OnDrawingIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionBefore", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionBefore
		{
			get
			{
				return this._RevisionBefore;
			}
			set
			{
				if ((this._RevisionBefore != value))
				{
					this.OnRevisionBeforeChanging(value);
					this.SendPropertyChanging();
					this._RevisionBefore = value;
					this.SendPropertyChanged("RevisionBefore");
					this.OnRevisionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionAfter", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionAfter
		{
			get
			{
				return this._RevisionAfter;
			}
			set
			{
				if ((this._RevisionAfter != value))
				{
					this.OnRevisionAfterChanging(value);
					this.SendPropertyChanging();
					this._RevisionAfter = value;
					this.SendPropertyChanged("RevisionAfter");
					this.OnRevisionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesBefore", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesBefore
		{
			get
			{
				return this._NumberOfPagesBefore;
			}
			set
			{
				if ((this._NumberOfPagesBefore != value))
				{
					this.OnNumberOfPagesBeforeChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesBefore = value;
					this.SendPropertyChanged("NumberOfPagesBefore");
					this.OnNumberOfPagesBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesAfter", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesAfter
		{
			get
			{
				return this._NumberOfPagesAfter;
			}
			set
			{
				if ((this._NumberOfPagesAfter != value))
				{
					this.OnNumberOfPagesAfterChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesAfter = value;
					this.SendPropertyChanged("NumberOfPagesAfter");
					this.OnNumberOfPagesAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileBefore
		{
			get
			{
				return this._DrawingFileBefore;
			}
			set
			{
				if ((this._DrawingFileBefore != value))
				{
					this.OnDrawingFileBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileBefore = value;
					this.SendPropertyChanged("DrawingFileBefore");
					this.OnDrawingFileBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileAfter
		{
			get
			{
				return this._DrawingFileAfter;
			}
			set
			{
				if ((this._DrawingFileAfter != value))
				{
					this.OnDrawingFileAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileAfter = value;
					this.SendPropertyChanged("DrawingFileAfter");
					this.OnDrawingFileAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UomBefore", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string UomBefore
		{
			get
			{
				return this._UomBefore;
			}
			set
			{
				if ((this._UomBefore != value))
				{
					this.OnUomBeforeChanging(value);
					this.SendPropertyChanging();
					this._UomBefore = value;
					this.SendPropertyChanged("UomBefore");
					this.OnUomBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UomAfter", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string UomAfter
		{
			get
			{
				return this._UomAfter;
			}
			set
			{
				if ((this._UomAfter != value))
				{
					this.OnUomAfterChanging(value);
					this.SendPropertyChanging();
					this._UomAfter = value;
					this.SendPropertyChanged("UomAfter");
					this.OnUomAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnEngineeringMasterOperation_EcnEngineeringMasterMaterial", Storage="_EcnEngineeringMasterOperation", ThisKey="EcnMasterOperationId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnEngineeringMasterOperation EcnEngineeringMasterOperation
		{
			get
			{
				return this._EcnEngineeringMasterOperation.Entity;
			}
			set
			{
				EcnEngineeringMasterOperation previousValue = this._EcnEngineeringMasterOperation.Entity;
				if (((previousValue != value) 
							|| (this._EcnEngineeringMasterOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnEngineeringMasterOperation.Entity = null;
						previousValue.EcnEngineeringMasterMaterials.Remove(this);
					}
					this._EcnEngineeringMasterOperation.Entity = value;
					if ((value != null))
					{
						value.EcnEngineeringMasterMaterials.Add(this);
						this._EcnMasterOperationId = value.Id;
					}
					else
					{
						this._EcnMasterOperationId = default(int);
					}
					this.SendPropertyChanged("EcnEngineeringMasterOperation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnEngineeringMasterOperations")]
	public partial class EcnEngineeringMasterOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OperationRecordId;
		
		private int _EcnEngMasterId;
		
		private string _EngMasterRevision;
		
		private System.Nullable<int> _SeqNoBefore;
		
		private System.Nullable<int> _SeqNoAfter;
		
		private string _ResourceIdBefore;
		
		private string _ResourceIdAfter;
		
		private string _DescriptionBefore;
		
		private string _DescriptionAfter;
		
		private string _TemplateIdBefore;
		
		private string _TemplateIdAfter;
		
		private string _ServiceIdBefore;
		
		private string _ServiceIdAfter;
		
		private string _SupplierIdBefore;
		
		private string _SupplierIdAfter;
		
		private System.Nullable<decimal> _SetupHoursBefore;
		
		private System.Nullable<decimal> _SetupHoursAfter;
		
		private System.Nullable<decimal> _RunPerHourBefore;
		
		private System.Nullable<decimal> _RunPerHourAfter;
		
		private string _DrawingIdBefore;
		
		private string _DrawingIdAfter;
		
		private string _RevisionBefore;
		
		private string _RevisionAfter;
		
		private System.Nullable<short> _NumberOfPagesBefore;
		
		private System.Nullable<short> _NumberOfPagesAfter;
		
		private string _DrawingFileBefore;
		
		private string _DrawingFileAfter;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnEngineeringMasterMaterial> _EcnEngineeringMasterMaterials;
		
		private EntityRef<EcnEngineeringMaster> _EcnEngineeringMaster;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOperationRecordIdChanging(string value);
    partial void OnOperationRecordIdChanged();
    partial void OnEcnEngMasterIdChanging(int value);
    partial void OnEcnEngMasterIdChanged();
    partial void OnEngMasterRevisionChanging(string value);
    partial void OnEngMasterRevisionChanged();
    partial void OnSeqNoBeforeChanging(System.Nullable<int> value);
    partial void OnSeqNoBeforeChanged();
    partial void OnSeqNoAfterChanging(System.Nullable<int> value);
    partial void OnSeqNoAfterChanged();
    partial void OnResourceIdBeforeChanging(string value);
    partial void OnResourceIdBeforeChanged();
    partial void OnResourceIdAfterChanging(string value);
    partial void OnResourceIdAfterChanged();
    partial void OnDescriptionBeforeChanging(string value);
    partial void OnDescriptionBeforeChanged();
    partial void OnDescriptionAfterChanging(string value);
    partial void OnDescriptionAfterChanged();
    partial void OnTemplateIdBeforeChanging(string value);
    partial void OnTemplateIdBeforeChanged();
    partial void OnTemplateIdAfterChanging(string value);
    partial void OnTemplateIdAfterChanged();
    partial void OnServiceIdBeforeChanging(string value);
    partial void OnServiceIdBeforeChanged();
    partial void OnServiceIdAfterChanging(string value);
    partial void OnServiceIdAfterChanged();
    partial void OnSupplierIdBeforeChanging(string value);
    partial void OnSupplierIdBeforeChanged();
    partial void OnSupplierIdAfterChanging(string value);
    partial void OnSupplierIdAfterChanged();
    partial void OnSetupHoursBeforeChanging(System.Nullable<decimal> value);
    partial void OnSetupHoursBeforeChanged();
    partial void OnSetupHoursAfterChanging(System.Nullable<decimal> value);
    partial void OnSetupHoursAfterChanged();
    partial void OnRunPerHourBeforeChanging(System.Nullable<decimal> value);
    partial void OnRunPerHourBeforeChanged();
    partial void OnRunPerHourAfterChanging(System.Nullable<decimal> value);
    partial void OnRunPerHourAfterChanged();
    partial void OnDrawingIdBeforeChanging(string value);
    partial void OnDrawingIdBeforeChanged();
    partial void OnDrawingIdAfterChanging(string value);
    partial void OnDrawingIdAfterChanged();
    partial void OnRevisionBeforeChanging(string value);
    partial void OnRevisionBeforeChanged();
    partial void OnRevisionAfterChanging(string value);
    partial void OnRevisionAfterChanged();
    partial void OnNumberOfPagesBeforeChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesBeforeChanged();
    partial void OnNumberOfPagesAfterChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesAfterChanged();
    partial void OnDrawingFileBeforeChanging(string value);
    partial void OnDrawingFileBeforeChanged();
    partial void OnDrawingFileAfterChanging(string value);
    partial void OnDrawingFileAfterChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnEngineeringMasterOperation()
		{
			this._EcnEngineeringMasterMaterials = new EntitySet<EcnEngineeringMasterMaterial>(new Action<EcnEngineeringMasterMaterial>(this.attach_EcnEngineeringMasterMaterials), new Action<EcnEngineeringMasterMaterial>(this.detach_EcnEngineeringMasterMaterials));
			this._EcnEngineeringMaster = default(EntityRef<EcnEngineeringMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OperationRecordId
		{
			get
			{
				return this._OperationRecordId;
			}
			set
			{
				if ((this._OperationRecordId != value))
				{
					this.OnOperationRecordIdChanging(value);
					this.SendPropertyChanging();
					this._OperationRecordId = value;
					this.SendPropertyChanged("OperationRecordId");
					this.OnOperationRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnEngMasterId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnEngMasterId
		{
			get
			{
				return this._EcnEngMasterId;
			}
			set
			{
				if ((this._EcnEngMasterId != value))
				{
					if (this._EcnEngineeringMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnEngMasterIdChanging(value);
					this.SendPropertyChanging();
					this._EcnEngMasterId = value;
					this.SendPropertyChanged("EcnEngMasterId");
					this.OnEcnEngMasterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngMasterRevision", DbType="NVarChar(80)", UpdateCheck=UpdateCheck.Never)]
		public string EngMasterRevision
		{
			get
			{
				return this._EngMasterRevision;
			}
			set
			{
				if ((this._EngMasterRevision != value))
				{
					this.OnEngMasterRevisionChanging(value);
					this.SendPropertyChanging();
					this._EngMasterRevision = value;
					this.SendPropertyChanged("EngMasterRevision");
					this.OnEngMasterRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoBefore", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoBefore
		{
			get
			{
				return this._SeqNoBefore;
			}
			set
			{
				if ((this._SeqNoBefore != value))
				{
					this.OnSeqNoBeforeChanging(value);
					this.SendPropertyChanging();
					this._SeqNoBefore = value;
					this.SendPropertyChanged("SeqNoBefore");
					this.OnSeqNoBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoAfter", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoAfter
		{
			get
			{
				return this._SeqNoAfter;
			}
			set
			{
				if ((this._SeqNoAfter != value))
				{
					this.OnSeqNoAfterChanging(value);
					this.SendPropertyChanging();
					this._SeqNoAfter = value;
					this.SendPropertyChanged("SeqNoAfter");
					this.OnSeqNoAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceIdBefore", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string ResourceIdBefore
		{
			get
			{
				return this._ResourceIdBefore;
			}
			set
			{
				if ((this._ResourceIdBefore != value))
				{
					this.OnResourceIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._ResourceIdBefore = value;
					this.SendPropertyChanged("ResourceIdBefore");
					this.OnResourceIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceIdAfter", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string ResourceIdAfter
		{
			get
			{
				return this._ResourceIdAfter;
			}
			set
			{
				if ((this._ResourceIdAfter != value))
				{
					this.OnResourceIdAfterChanging(value);
					this.SendPropertyChanging();
					this._ResourceIdAfter = value;
					this.SendPropertyChanged("ResourceIdAfter");
					this.OnResourceIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionBefore
		{
			get
			{
				return this._DescriptionBefore;
			}
			set
			{
				if ((this._DescriptionBefore != value))
				{
					this.OnDescriptionBeforeChanging(value);
					this.SendPropertyChanging();
					this._DescriptionBefore = value;
					this.SendPropertyChanged("DescriptionBefore");
					this.OnDescriptionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionAfter
		{
			get
			{
				return this._DescriptionAfter;
			}
			set
			{
				if ((this._DescriptionAfter != value))
				{
					this.OnDescriptionAfterChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAfter = value;
					this.SendPropertyChanged("DescriptionAfter");
					this.OnDescriptionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateIdBefore", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string TemplateIdBefore
		{
			get
			{
				return this._TemplateIdBefore;
			}
			set
			{
				if ((this._TemplateIdBefore != value))
				{
					this.OnTemplateIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._TemplateIdBefore = value;
					this.SendPropertyChanged("TemplateIdBefore");
					this.OnTemplateIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateIdAfter", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string TemplateIdAfter
		{
			get
			{
				return this._TemplateIdAfter;
			}
			set
			{
				if ((this._TemplateIdAfter != value))
				{
					this.OnTemplateIdAfterChanging(value);
					this.SendPropertyChanging();
					this._TemplateIdAfter = value;
					this.SendPropertyChanged("TemplateIdAfter");
					this.OnTemplateIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceIdBefore", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string ServiceIdBefore
		{
			get
			{
				return this._ServiceIdBefore;
			}
			set
			{
				if ((this._ServiceIdBefore != value))
				{
					this.OnServiceIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._ServiceIdBefore = value;
					this.SendPropertyChanged("ServiceIdBefore");
					this.OnServiceIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceIdAfter", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string ServiceIdAfter
		{
			get
			{
				return this._ServiceIdAfter;
			}
			set
			{
				if ((this._ServiceIdAfter != value))
				{
					this.OnServiceIdAfterChanging(value);
					this.SendPropertyChanging();
					this._ServiceIdAfter = value;
					this.SendPropertyChanged("ServiceIdAfter");
					this.OnServiceIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierIdBefore", DbType="NVarChar(41)", UpdateCheck=UpdateCheck.Never)]
		public string SupplierIdBefore
		{
			get
			{
				return this._SupplierIdBefore;
			}
			set
			{
				if ((this._SupplierIdBefore != value))
				{
					this.OnSupplierIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._SupplierIdBefore = value;
					this.SendPropertyChanged("SupplierIdBefore");
					this.OnSupplierIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierIdAfter", DbType="NVarChar(41)", UpdateCheck=UpdateCheck.Never)]
		public string SupplierIdAfter
		{
			get
			{
				return this._SupplierIdAfter;
			}
			set
			{
				if ((this._SupplierIdAfter != value))
				{
					this.OnSupplierIdAfterChanging(value);
					this.SendPropertyChanging();
					this._SupplierIdAfter = value;
					this.SendPropertyChanged("SupplierIdAfter");
					this.OnSupplierIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetupHoursBefore", DbType="Decimal(14,6)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> SetupHoursBefore
		{
			get
			{
				return this._SetupHoursBefore;
			}
			set
			{
				if ((this._SetupHoursBefore != value))
				{
					this.OnSetupHoursBeforeChanging(value);
					this.SendPropertyChanging();
					this._SetupHoursBefore = value;
					this.SendPropertyChanged("SetupHoursBefore");
					this.OnSetupHoursBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetupHoursAfter", DbType="Decimal(14,6)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> SetupHoursAfter
		{
			get
			{
				return this._SetupHoursAfter;
			}
			set
			{
				if ((this._SetupHoursAfter != value))
				{
					this.OnSetupHoursAfterChanging(value);
					this.SendPropertyChanging();
					this._SetupHoursAfter = value;
					this.SendPropertyChanged("SetupHoursAfter");
					this.OnSetupHoursAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunPerHourBefore", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RunPerHourBefore
		{
			get
			{
				return this._RunPerHourBefore;
			}
			set
			{
				if ((this._RunPerHourBefore != value))
				{
					this.OnRunPerHourBeforeChanging(value);
					this.SendPropertyChanging();
					this._RunPerHourBefore = value;
					this.SendPropertyChanged("RunPerHourBefore");
					this.OnRunPerHourBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunPerHourAfter", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RunPerHourAfter
		{
			get
			{
				return this._RunPerHourAfter;
			}
			set
			{
				if ((this._RunPerHourAfter != value))
				{
					this.OnRunPerHourAfterChanging(value);
					this.SendPropertyChanging();
					this._RunPerHourAfter = value;
					this.SendPropertyChanged("RunPerHourAfter");
					this.OnRunPerHourAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdBefore", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdBefore
		{
			get
			{
				return this._DrawingIdBefore;
			}
			set
			{
				if ((this._DrawingIdBefore != value))
				{
					this.OnDrawingIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdBefore = value;
					this.SendPropertyChanged("DrawingIdBefore");
					this.OnDrawingIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdAfter", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdAfter
		{
			get
			{
				return this._DrawingIdAfter;
			}
			set
			{
				if ((this._DrawingIdAfter != value))
				{
					this.OnDrawingIdAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdAfter = value;
					this.SendPropertyChanged("DrawingIdAfter");
					this.OnDrawingIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionBefore", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionBefore
		{
			get
			{
				return this._RevisionBefore;
			}
			set
			{
				if ((this._RevisionBefore != value))
				{
					this.OnRevisionBeforeChanging(value);
					this.SendPropertyChanging();
					this._RevisionBefore = value;
					this.SendPropertyChanged("RevisionBefore");
					this.OnRevisionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionAfter", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionAfter
		{
			get
			{
				return this._RevisionAfter;
			}
			set
			{
				if ((this._RevisionAfter != value))
				{
					this.OnRevisionAfterChanging(value);
					this.SendPropertyChanging();
					this._RevisionAfter = value;
					this.SendPropertyChanged("RevisionAfter");
					this.OnRevisionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesBefore", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesBefore
		{
			get
			{
				return this._NumberOfPagesBefore;
			}
			set
			{
				if ((this._NumberOfPagesBefore != value))
				{
					this.OnNumberOfPagesBeforeChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesBefore = value;
					this.SendPropertyChanged("NumberOfPagesBefore");
					this.OnNumberOfPagesBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesAfter", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesAfter
		{
			get
			{
				return this._NumberOfPagesAfter;
			}
			set
			{
				if ((this._NumberOfPagesAfter != value))
				{
					this.OnNumberOfPagesAfterChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesAfter = value;
					this.SendPropertyChanged("NumberOfPagesAfter");
					this.OnNumberOfPagesAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileBefore
		{
			get
			{
				return this._DrawingFileBefore;
			}
			set
			{
				if ((this._DrawingFileBefore != value))
				{
					this.OnDrawingFileBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileBefore = value;
					this.SendPropertyChanged("DrawingFileBefore");
					this.OnDrawingFileBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileAfter
		{
			get
			{
				return this._DrawingFileAfter;
			}
			set
			{
				if ((this._DrawingFileAfter != value))
				{
					this.OnDrawingFileAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileAfter = value;
					this.SendPropertyChanged("DrawingFileAfter");
					this.OnDrawingFileAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnEngineeringMasterOperation_EcnEngineeringMasterMaterial", Storage="_EcnEngineeringMasterMaterials", ThisKey="Id", OtherKey="EcnMasterOperationId")]
		public EntitySet<EcnEngineeringMasterMaterial> EcnEngineeringMasterMaterials
		{
			get
			{
				return this._EcnEngineeringMasterMaterials;
			}
			set
			{
				this._EcnEngineeringMasterMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnEngineeringMaster_EcnEngineeringMasterOperation", Storage="_EcnEngineeringMaster", ThisKey="EcnEngMasterId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnEngineeringMaster EcnEngineeringMaster
		{
			get
			{
				return this._EcnEngineeringMaster.Entity;
			}
			set
			{
				EcnEngineeringMaster previousValue = this._EcnEngineeringMaster.Entity;
				if (((previousValue != value) 
							|| (this._EcnEngineeringMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnEngineeringMaster.Entity = null;
						previousValue.EcnEngineeringMasterOperations.Remove(this);
					}
					this._EcnEngineeringMaster.Entity = value;
					if ((value != null))
					{
						value.EcnEngineeringMasterOperations.Add(this);
						this._EcnEngMasterId = value.Id;
					}
					else
					{
						this._EcnEngMasterId = default(int);
					}
					this.SendPropertyChanged("EcnEngineeringMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnEngineeringMasterMaterials(EcnEngineeringMasterMaterial entity)
		{
			this.SendPropertyChanging();
			entity.EcnEngineeringMasterOperation = this;
		}
		
		private void detach_EcnEngineeringMasterMaterials(EcnEngineeringMasterMaterial entity)
		{
			this.SendPropertyChanging();
			entity.EcnEngineeringMasterOperation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnHeader")]
	public partial class EcnHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EcnNumber;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private string _CreatedBy;
		
		private string _PartNumber;
		
		private string _PartDescription;
		
		private string _CustomerPartNumber;
		
		private string _Customer;
		
		private string _PssRevision;
		
		private string _CustomerRevision;
		
		private string _Status;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnCheck> _EcnChecks;
		
		private EntitySet<EcnEngineeringMaster> _EcnEngineeringMasters;
		
		private EntitySet<EcnInventoryOnHand> _EcnInventoryOnHands;
		
		private EntitySet<EcnOpenWorkOrder> _EcnOpenWorkOrders;
		
		private EntitySet<EcnPurchaseOrder> _EcnPurchaseOrders;
		
		private EntitySet<EcnSalesOrder> _EcnSalesOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEcnNumberChanging(int value);
    partial void OnEcnNumberChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnPartDescriptionChanging(string value);
    partial void OnPartDescriptionChanged();
    partial void OnCustomerPartNumberChanging(string value);
    partial void OnCustomerPartNumberChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnPssRevisionChanging(string value);
    partial void OnPssRevisionChanged();
    partial void OnCustomerRevisionChanging(string value);
    partial void OnCustomerRevisionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnHeader()
		{
			this._EcnChecks = new EntitySet<EcnCheck>(new Action<EcnCheck>(this.attach_EcnChecks), new Action<EcnCheck>(this.detach_EcnChecks));
			this._EcnEngineeringMasters = new EntitySet<EcnEngineeringMaster>(new Action<EcnEngineeringMaster>(this.attach_EcnEngineeringMasters), new Action<EcnEngineeringMaster>(this.detach_EcnEngineeringMasters));
			this._EcnInventoryOnHands = new EntitySet<EcnInventoryOnHand>(new Action<EcnInventoryOnHand>(this.attach_EcnInventoryOnHands), new Action<EcnInventoryOnHand>(this.detach_EcnInventoryOnHands));
			this._EcnOpenWorkOrders = new EntitySet<EcnOpenWorkOrder>(new Action<EcnOpenWorkOrder>(this.attach_EcnOpenWorkOrders), new Action<EcnOpenWorkOrder>(this.detach_EcnOpenWorkOrders));
			this._EcnPurchaseOrders = new EntitySet<EcnPurchaseOrder>(new Action<EcnPurchaseOrder>(this.attach_EcnPurchaseOrders), new Action<EcnPurchaseOrder>(this.detach_EcnPurchaseOrders));
			this._EcnSalesOrders = new EntitySet<EcnSalesOrder>(new Action<EcnSalesOrder>(this.attach_EcnSalesOrders), new Action<EcnSalesOrder>(this.detach_EcnSalesOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnNumber", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnNumber
		{
			get
			{
				return this._EcnNumber;
			}
			set
			{
				if ((this._EcnNumber != value))
				{
					this.OnEcnNumberChanging(value);
					this.SendPropertyChanging();
					this._EcnNumber = value;
					this.SendPropertyChanged("EcnNumber");
					this.OnEcnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartDescription", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string PartDescription
		{
			get
			{
				return this._PartDescription;
			}
			set
			{
				if ((this._PartDescription != value))
				{
					this.OnPartDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PartDescription = value;
					this.SendPropertyChanged("PartDescription");
					this.OnPartDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPartNumber", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string CustomerPartNumber
		{
			get
			{
				return this._CustomerPartNumber;
			}
			set
			{
				if ((this._CustomerPartNumber != value))
				{
					this.OnCustomerPartNumberChanging(value);
					this.SendPropertyChanging();
					this._CustomerPartNumber = value;
					this.SendPropertyChanged("CustomerPartNumber");
					this.OnCustomerPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="NVarChar(41)", UpdateCheck=UpdateCheck.Never)]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PssRevision", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string PssRevision
		{
			get
			{
				return this._PssRevision;
			}
			set
			{
				if ((this._PssRevision != value))
				{
					this.OnPssRevisionChanging(value);
					this.SendPropertyChanging();
					this._PssRevision = value;
					this.SendPropertyChanged("PssRevision");
					this.OnPssRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerRevision", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CustomerRevision
		{
			get
			{
				return this._CustomerRevision;
			}
			set
			{
				if ((this._CustomerRevision != value))
				{
					this.OnCustomerRevisionChanging(value);
					this.SendPropertyChanging();
					this._CustomerRevision = value;
					this.SendPropertyChanged("CustomerRevision");
					this.OnCustomerRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnCheck", Storage="_EcnChecks", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnCheck> EcnChecks
		{
			get
			{
				return this._EcnChecks;
			}
			set
			{
				this._EcnChecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnEngineeringMaster", Storage="_EcnEngineeringMasters", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnEngineeringMaster> EcnEngineeringMasters
		{
			get
			{
				return this._EcnEngineeringMasters;
			}
			set
			{
				this._EcnEngineeringMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnInventoryOnHand", Storage="_EcnInventoryOnHands", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnInventoryOnHand> EcnInventoryOnHands
		{
			get
			{
				return this._EcnInventoryOnHands;
			}
			set
			{
				this._EcnInventoryOnHands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnOpenWorkOrder", Storage="_EcnOpenWorkOrders", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnOpenWorkOrder> EcnOpenWorkOrders
		{
			get
			{
				return this._EcnOpenWorkOrders;
			}
			set
			{
				this._EcnOpenWorkOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnPurchaseOrder", Storage="_EcnPurchaseOrders", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnPurchaseOrder> EcnPurchaseOrders
		{
			get
			{
				return this._EcnPurchaseOrders;
			}
			set
			{
				this._EcnPurchaseOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnSalesOrder", Storage="_EcnSalesOrders", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnSalesOrder> EcnSalesOrders
		{
			get
			{
				return this._EcnSalesOrders;
			}
			set
			{
				this._EcnSalesOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnEngineeringMasters(EcnEngineeringMaster entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnEngineeringMasters(EcnEngineeringMaster entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnInventoryOnHands(EcnInventoryOnHand entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnInventoryOnHands(EcnInventoryOnHand entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnOpenWorkOrders(EcnOpenWorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnOpenWorkOrders(EcnOpenWorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnPurchaseOrders(EcnPurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnPurchaseOrders(EcnPurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnSalesOrders(EcnSalesOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnSalesOrders(EcnSalesOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnInventoryOnHand")]
	public partial class EcnInventoryOnHand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EcnId;
		
		private string _LocationId;
		
		private System.Nullable<decimal> _QtyOnHand;
		
		private string _Notes;
		
		private System.Nullable<bool> _Reworkable;
		
		private System.Nullable<System.DateTime> _DateChecked;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    partial void OnQtyOnHandChanging(System.Nullable<decimal> value);
    partial void OnQtyOnHandChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnReworkableChanging(System.Nullable<bool> value);
    partial void OnReworkableChanged();
    partial void OnDateCheckedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCheckedChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnInventoryOnHand()
		{
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyOnHand", DbType="Decimal(14,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyOnHand
		{
			get
			{
				return this._QtyOnHand;
			}
			set
			{
				if ((this._QtyOnHand != value))
				{
					this.OnQtyOnHandChanging(value);
					this.SendPropertyChanging();
					this._QtyOnHand = value;
					this.SendPropertyChanged("QtyOnHand");
					this.OnQtyOnHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reworkable", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> Reworkable
		{
			get
			{
				return this._Reworkable;
			}
			set
			{
				if ((this._Reworkable != value))
				{
					this.OnReworkableChanging(value);
					this.SendPropertyChanging();
					this._Reworkable = value;
					this.SendPropertyChanged("Reworkable");
					this.OnReworkableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChecked", DbType="DateTime2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateChecked
		{
			get
			{
				return this._DateChecked;
			}
			set
			{
				if ((this._DateChecked != value))
				{
					this.OnDateCheckedChanging(value);
					this.SendPropertyChanging();
					this._DateChecked = value;
					this.SendPropertyChanged("DateChecked");
					this.OnDateCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnInventoryOnHand", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnInventoryOnHands.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnInventoryOnHands.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnOpenWorkOrders")]
	public partial class EcnOpenWorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _WorkOrderRecordId;
		
		private int _EcnId;
		
		private string _WorkId;
		
		private string _StartingDescription;
		
		private string _EndingDescription;
		
		private string _StartingDrawingId;
		
		private string _EndingDrawingId;
		
		private string _StartingRevision;
		
		private string _EndingRevision;
		
		private System.Nullable<short> _StartingNumPages;
		
		private System.Nullable<short> _EndingNumPages;
		
		private System.Nullable<short> _StartingGlobalRank;
		
		private System.Nullable<short> _EndingGlobalRank;
		
		private string _StartingSpecifications;
		
		private string _EndingSpecifications;
		
		private string _StartingNotes;
		
		private string _EndingNotes;
		
		private System.Nullable<System.DateTime> _LastSaved;
		
		private System.Nullable<System.DateTime> _StartingDate;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnWorkOrderOperation> _EcnWorkOrderOperations;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnWorkOrderRecordIdChanging(string value);
    partial void OnWorkOrderRecordIdChanged();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnWorkIdChanging(string value);
    partial void OnWorkIdChanged();
    partial void OnStartingDescriptionChanging(string value);
    partial void OnStartingDescriptionChanged();
    partial void OnEndingDescriptionChanging(string value);
    partial void OnEndingDescriptionChanged();
    partial void OnStartingDrawingIdChanging(string value);
    partial void OnStartingDrawingIdChanged();
    partial void OnEndingDrawingIdChanging(string value);
    partial void OnEndingDrawingIdChanged();
    partial void OnStartingRevisionChanging(string value);
    partial void OnStartingRevisionChanged();
    partial void OnEndingRevisionChanging(string value);
    partial void OnEndingRevisionChanged();
    partial void OnStartingNumPagesChanging(System.Nullable<short> value);
    partial void OnStartingNumPagesChanged();
    partial void OnEndingNumPagesChanging(System.Nullable<short> value);
    partial void OnEndingNumPagesChanged();
    partial void OnStartingGlobalRankChanging(System.Nullable<short> value);
    partial void OnStartingGlobalRankChanged();
    partial void OnEndingGlobalRankChanging(System.Nullable<short> value);
    partial void OnEndingGlobalRankChanged();
    partial void OnStartingSpecificationsChanging(string value);
    partial void OnStartingSpecificationsChanged();
    partial void OnEndingSpecificationsChanging(string value);
    partial void OnEndingSpecificationsChanged();
    partial void OnStartingNotesChanging(string value);
    partial void OnStartingNotesChanged();
    partial void OnEndingNotesChanging(string value);
    partial void OnEndingNotesChanged();
    partial void OnLastSavedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSavedChanged();
    partial void OnStartingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartingDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnOpenWorkOrder()
		{
			this._EcnWorkOrderOperations = new EntitySet<EcnWorkOrderOperation>(new Action<EcnWorkOrderOperation>(this.attach_EcnWorkOrderOperations), new Action<EcnWorkOrderOperation>(this.detach_EcnWorkOrderOperations));
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WorkOrderRecordId
		{
			get
			{
				return this._WorkOrderRecordId;
			}
			set
			{
				if ((this._WorkOrderRecordId != value))
				{
					this.OnWorkOrderRecordIdChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderRecordId = value;
					this.SendPropertyChanged("WorkOrderRecordId");
					this.OnWorkOrderRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WorkId
		{
			get
			{
				return this._WorkId;
			}
			set
			{
				if ((this._WorkId != value))
				{
					this.OnWorkIdChanging(value);
					this.SendPropertyChanging();
					this._WorkId = value;
					this.SendPropertyChanged("WorkId");
					this.OnWorkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingDescription", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string StartingDescription
		{
			get
			{
				return this._StartingDescription;
			}
			set
			{
				if ((this._StartingDescription != value))
				{
					this.OnStartingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._StartingDescription = value;
					this.SendPropertyChanged("StartingDescription");
					this.OnStartingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingDescription", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string EndingDescription
		{
			get
			{
				return this._EndingDescription;
			}
			set
			{
				if ((this._EndingDescription != value))
				{
					this.OnEndingDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EndingDescription = value;
					this.SendPropertyChanged("EndingDescription");
					this.OnEndingDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingDrawingId", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string StartingDrawingId
		{
			get
			{
				return this._StartingDrawingId;
			}
			set
			{
				if ((this._StartingDrawingId != value))
				{
					this.OnStartingDrawingIdChanging(value);
					this.SendPropertyChanging();
					this._StartingDrawingId = value;
					this.SendPropertyChanged("StartingDrawingId");
					this.OnStartingDrawingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingDrawingId", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string EndingDrawingId
		{
			get
			{
				return this._EndingDrawingId;
			}
			set
			{
				if ((this._EndingDrawingId != value))
				{
					this.OnEndingDrawingIdChanging(value);
					this.SendPropertyChanging();
					this._EndingDrawingId = value;
					this.SendPropertyChanged("EndingDrawingId");
					this.OnEndingDrawingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingRevision", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string StartingRevision
		{
			get
			{
				return this._StartingRevision;
			}
			set
			{
				if ((this._StartingRevision != value))
				{
					this.OnStartingRevisionChanging(value);
					this.SendPropertyChanging();
					this._StartingRevision = value;
					this.SendPropertyChanged("StartingRevision");
					this.OnStartingRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingRevision", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string EndingRevision
		{
			get
			{
				return this._EndingRevision;
			}
			set
			{
				if ((this._EndingRevision != value))
				{
					this.OnEndingRevisionChanging(value);
					this.SendPropertyChanging();
					this._EndingRevision = value;
					this.SendPropertyChanged("EndingRevision");
					this.OnEndingRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingNumPages", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> StartingNumPages
		{
			get
			{
				return this._StartingNumPages;
			}
			set
			{
				if ((this._StartingNumPages != value))
				{
					this.OnStartingNumPagesChanging(value);
					this.SendPropertyChanging();
					this._StartingNumPages = value;
					this.SendPropertyChanged("StartingNumPages");
					this.OnStartingNumPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingNumPages", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> EndingNumPages
		{
			get
			{
				return this._EndingNumPages;
			}
			set
			{
				if ((this._EndingNumPages != value))
				{
					this.OnEndingNumPagesChanging(value);
					this.SendPropertyChanging();
					this._EndingNumPages = value;
					this.SendPropertyChanged("EndingNumPages");
					this.OnEndingNumPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingGlobalRank", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> StartingGlobalRank
		{
			get
			{
				return this._StartingGlobalRank;
			}
			set
			{
				if ((this._StartingGlobalRank != value))
				{
					this.OnStartingGlobalRankChanging(value);
					this.SendPropertyChanging();
					this._StartingGlobalRank = value;
					this.SendPropertyChanged("StartingGlobalRank");
					this.OnStartingGlobalRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingGlobalRank", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> EndingGlobalRank
		{
			get
			{
				return this._EndingGlobalRank;
			}
			set
			{
				if ((this._EndingGlobalRank != value))
				{
					this.OnEndingGlobalRankChanging(value);
					this.SendPropertyChanging();
					this._EndingGlobalRank = value;
					this.SendPropertyChanged("EndingGlobalRank");
					this.OnEndingGlobalRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingSpecifications", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StartingSpecifications
		{
			get
			{
				return this._StartingSpecifications;
			}
			set
			{
				if ((this._StartingSpecifications != value))
				{
					this.OnStartingSpecificationsChanging(value);
					this.SendPropertyChanging();
					this._StartingSpecifications = value;
					this.SendPropertyChanged("StartingSpecifications");
					this.OnStartingSpecificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingSpecifications", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EndingSpecifications
		{
			get
			{
				return this._EndingSpecifications;
			}
			set
			{
				if ((this._EndingSpecifications != value))
				{
					this.OnEndingSpecificationsChanging(value);
					this.SendPropertyChanging();
					this._EndingSpecifications = value;
					this.SendPropertyChanged("EndingSpecifications");
					this.OnEndingSpecificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingNotes", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string StartingNotes
		{
			get
			{
				return this._StartingNotes;
			}
			set
			{
				if ((this._StartingNotes != value))
				{
					this.OnStartingNotesChanging(value);
					this.SendPropertyChanging();
					this._StartingNotes = value;
					this.SendPropertyChanged("StartingNotes");
					this.OnStartingNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndingNotes", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string EndingNotes
		{
			get
			{
				return this._EndingNotes;
			}
			set
			{
				if ((this._EndingNotes != value))
				{
					this.OnEndingNotesChanging(value);
					this.SendPropertyChanging();
					this._EndingNotes = value;
					this.SendPropertyChanged("EndingNotes");
					this.OnEndingNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSaved", DbType="DateTime2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastSaved
		{
			get
			{
				return this._LastSaved;
			}
			set
			{
				if ((this._LastSaved != value))
				{
					this.OnLastSavedChanging(value);
					this.SendPropertyChanging();
					this._LastSaved = value;
					this.SendPropertyChanged("LastSaved");
					this.OnLastSavedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartingDate", DbType="DateTime2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> StartingDate
		{
			get
			{
				return this._StartingDate;
			}
			set
			{
				if ((this._StartingDate != value))
				{
					this.OnStartingDateChanging(value);
					this.SendPropertyChanging();
					this._StartingDate = value;
					this.SendPropertyChanged("StartingDate");
					this.OnStartingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnOpenWorkOrder_EcnWorkOrderOperation", Storage="_EcnWorkOrderOperations", ThisKey="Id", OtherKey="EcnOpenWorkOrderId")]
		public EntitySet<EcnWorkOrderOperation> EcnWorkOrderOperations
		{
			get
			{
				return this._EcnWorkOrderOperations;
			}
			set
			{
				this._EcnWorkOrderOperations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnOpenWorkOrder", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnOpenWorkOrders.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnOpenWorkOrders.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnWorkOrderOperations(EcnWorkOrderOperation entity)
		{
			this.SendPropertyChanging();
			entity.EcnOpenWorkOrder = this;
		}
		
		private void detach_EcnWorkOrderOperations(EcnWorkOrderOperation entity)
		{
			this.SendPropertyChanging();
			entity.EcnOpenWorkOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnPurchaseOrderLines")]
	public partial class EcnPurchaseOrderLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EcnPurchaseOrderId;
		
		private int _LineNo;
		
		private string _PartNumber;
		
		private string _LineStatus;
		
		private System.Nullable<decimal> _OrderQuantity;
		
		private System.Nullable<decimal> _ReceivedQuantity;
		
		private string _DescriptionBefore;
		
		private string _DescriptionAfter;
		
		private string _DrawingIdBefore;
		
		private string _DrawingIdAfter;
		
		private string _DrawingRevBefore;
		
		private string _DrawingRevAfter;
		
		private string _SpecificationsBefore;
		
		private string _SpecificationsAfter;
		
		private string _ServiceId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<EcnPurchaseOrder> _EcnPurchaseOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEcnPurchaseOrderIdChanging(int value);
    partial void OnEcnPurchaseOrderIdChanged();
    partial void OnLineNoChanging(int value);
    partial void OnLineNoChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnLineStatusChanging(string value);
    partial void OnLineStatusChanged();
    partial void OnOrderQuantityChanging(System.Nullable<decimal> value);
    partial void OnOrderQuantityChanged();
    partial void OnReceivedQuantityChanging(System.Nullable<decimal> value);
    partial void OnReceivedQuantityChanged();
    partial void OnDescriptionBeforeChanging(string value);
    partial void OnDescriptionBeforeChanged();
    partial void OnDescriptionAfterChanging(string value);
    partial void OnDescriptionAfterChanged();
    partial void OnDrawingIdBeforeChanging(string value);
    partial void OnDrawingIdBeforeChanged();
    partial void OnDrawingIdAfterChanging(string value);
    partial void OnDrawingIdAfterChanged();
    partial void OnDrawingRevBeforeChanging(string value);
    partial void OnDrawingRevBeforeChanged();
    partial void OnDrawingRevAfterChanging(string value);
    partial void OnDrawingRevAfterChanged();
    partial void OnSpecificationsBeforeChanging(string value);
    partial void OnSpecificationsBeforeChanged();
    partial void OnSpecificationsAfterChanging(string value);
    partial void OnSpecificationsAfterChanged();
    partial void OnServiceIdChanging(string value);
    partial void OnServiceIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnPurchaseOrderLine()
		{
			this._EcnPurchaseOrder = default(EntityRef<EcnPurchaseOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnPurchaseOrderId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnPurchaseOrderId
		{
			get
			{
				return this._EcnPurchaseOrderId;
			}
			set
			{
				if ((this._EcnPurchaseOrderId != value))
				{
					if (this._EcnPurchaseOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnPurchaseOrderIdChanging(value);
					this.SendPropertyChanging();
					this._EcnPurchaseOrderId = value;
					this.SendPropertyChanged("EcnPurchaseOrderId");
					this.OnEcnPurchaseOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[LineNo]", Storage="_LineNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LineNo
		{
			get
			{
				return this._LineNo;
			}
			set
			{
				if ((this._LineNo != value))
				{
					this.OnLineNoChanging(value);
					this.SendPropertyChanging();
					this._LineNo = value;
					this.SendPropertyChanged("LineNo");
					this.OnLineNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineStatus", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LineStatus
		{
			get
			{
				return this._LineStatus;
			}
			set
			{
				if ((this._LineStatus != value))
				{
					this.OnLineStatusChanging(value);
					this.SendPropertyChanging();
					this._LineStatus = value;
					this.SendPropertyChanged("LineStatus");
					this.OnLineStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderQuantity", DbType="Decimal(14,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OrderQuantity
		{
			get
			{
				return this._OrderQuantity;
			}
			set
			{
				if ((this._OrderQuantity != value))
				{
					this.OnOrderQuantityChanging(value);
					this.SendPropertyChanging();
					this._OrderQuantity = value;
					this.SendPropertyChanged("OrderQuantity");
					this.OnOrderQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReceivedQuantity", DbType="Decimal(14,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ReceivedQuantity
		{
			get
			{
				return this._ReceivedQuantity;
			}
			set
			{
				if ((this._ReceivedQuantity != value))
				{
					this.OnReceivedQuantityChanging(value);
					this.SendPropertyChanging();
					this._ReceivedQuantity = value;
					this.SendPropertyChanged("ReceivedQuantity");
					this.OnReceivedQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionBefore
		{
			get
			{
				return this._DescriptionBefore;
			}
			set
			{
				if ((this._DescriptionBefore != value))
				{
					this.OnDescriptionBeforeChanging(value);
					this.SendPropertyChanging();
					this._DescriptionBefore = value;
					this.SendPropertyChanged("DescriptionBefore");
					this.OnDescriptionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionAfter
		{
			get
			{
				return this._DescriptionAfter;
			}
			set
			{
				if ((this._DescriptionAfter != value))
				{
					this.OnDescriptionAfterChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAfter = value;
					this.SendPropertyChanged("DescriptionAfter");
					this.OnDescriptionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdBefore", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdBefore
		{
			get
			{
				return this._DrawingIdBefore;
			}
			set
			{
				if ((this._DrawingIdBefore != value))
				{
					this.OnDrawingIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdBefore = value;
					this.SendPropertyChanged("DrawingIdBefore");
					this.OnDrawingIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdAfter", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdAfter
		{
			get
			{
				return this._DrawingIdAfter;
			}
			set
			{
				if ((this._DrawingIdAfter != value))
				{
					this.OnDrawingIdAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdAfter = value;
					this.SendPropertyChanged("DrawingIdAfter");
					this.OnDrawingIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingRevBefore", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingRevBefore
		{
			get
			{
				return this._DrawingRevBefore;
			}
			set
			{
				if ((this._DrawingRevBefore != value))
				{
					this.OnDrawingRevBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingRevBefore = value;
					this.SendPropertyChanged("DrawingRevBefore");
					this.OnDrawingRevBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingRevAfter", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingRevAfter
		{
			get
			{
				return this._DrawingRevAfter;
			}
			set
			{
				if ((this._DrawingRevAfter != value))
				{
					this.OnDrawingRevAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingRevAfter = value;
					this.SendPropertyChanged("DrawingRevAfter");
					this.OnDrawingRevAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationsBefore", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SpecificationsBefore
		{
			get
			{
				return this._SpecificationsBefore;
			}
			set
			{
				if ((this._SpecificationsBefore != value))
				{
					this.OnSpecificationsBeforeChanging(value);
					this.SendPropertyChanging();
					this._SpecificationsBefore = value;
					this.SendPropertyChanged("SpecificationsBefore");
					this.OnSpecificationsBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationsAfter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SpecificationsAfter
		{
			get
			{
				return this._SpecificationsAfter;
			}
			set
			{
				if ((this._SpecificationsAfter != value))
				{
					this.OnSpecificationsAfterChanging(value);
					this.SendPropertyChanging();
					this._SpecificationsAfter = value;
					this.SendPropertyChanged("SpecificationsAfter");
					this.OnSpecificationsAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceId", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string ServiceId
		{
			get
			{
				return this._ServiceId;
			}
			set
			{
				if ((this._ServiceId != value))
				{
					this.OnServiceIdChanging(value);
					this.SendPropertyChanging();
					this._ServiceId = value;
					this.SendPropertyChanged("ServiceId");
					this.OnServiceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnPurchaseOrder_EcnPurchaseOrderLine", Storage="_EcnPurchaseOrder", ThisKey="EcnPurchaseOrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnPurchaseOrder EcnPurchaseOrder
		{
			get
			{
				return this._EcnPurchaseOrder.Entity;
			}
			set
			{
				EcnPurchaseOrder previousValue = this._EcnPurchaseOrder.Entity;
				if (((previousValue != value) 
							|| (this._EcnPurchaseOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnPurchaseOrder.Entity = null;
						previousValue.EcnPurchaseOrderLines.Remove(this);
					}
					this._EcnPurchaseOrder.Entity = value;
					if ((value != null))
					{
						value.EcnPurchaseOrderLines.Add(this);
						this._EcnPurchaseOrderId = value.Id;
					}
					else
					{
						this._EcnPurchaseOrderId = default(int);
					}
					this.SendPropertyChanged("EcnPurchaseOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnPurchaseOrders")]
	public partial class EcnPurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _PurchaseOrderRecordId;
		
		private int _EcnId;
		
		private string _PurchaseId;
		
		private string _SupplierId;
		
		private System.Nullable<System.DateTime> _OrderDate;
		
		private string _OrderStatus;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnPurchaseOrderLine> _EcnPurchaseOrderLines;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPurchaseOrderRecordIdChanging(string value);
    partial void OnPurchaseOrderRecordIdChanged();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnPurchaseIdChanging(string value);
    partial void OnPurchaseIdChanged();
    partial void OnSupplierIdChanging(string value);
    partial void OnSupplierIdChanged();
    partial void OnOrderDateChanging(System.Nullable<System.DateTime> value);
    partial void OnOrderDateChanged();
    partial void OnOrderStatusChanging(string value);
    partial void OnOrderStatusChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnPurchaseOrder()
		{
			this._EcnPurchaseOrderLines = new EntitySet<EcnPurchaseOrderLine>(new Action<EcnPurchaseOrderLine>(this.attach_EcnPurchaseOrderLines), new Action<EcnPurchaseOrderLine>(this.detach_EcnPurchaseOrderLines));
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PurchaseOrderRecordId
		{
			get
			{
				return this._PurchaseOrderRecordId;
			}
			set
			{
				if ((this._PurchaseOrderRecordId != value))
				{
					this.OnPurchaseOrderRecordIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderRecordId = value;
					this.SendPropertyChanged("PurchaseOrderRecordId");
					this.OnPurchaseOrderRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PurchaseId
		{
			get
			{
				return this._PurchaseId;
			}
			set
			{
				if ((this._PurchaseId != value))
				{
					this.OnPurchaseIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseId = value;
					this.SendPropertyChanged("PurchaseId");
					this.OnPurchaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="NVarChar(41)", UpdateCheck=UpdateCheck.Never)]
		public string SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime2", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string OrderStatus
		{
			get
			{
				return this._OrderStatus;
			}
			set
			{
				if ((this._OrderStatus != value))
				{
					this.OnOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus = value;
					this.SendPropertyChanged("OrderStatus");
					this.OnOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnPurchaseOrder_EcnPurchaseOrderLine", Storage="_EcnPurchaseOrderLines", ThisKey="Id", OtherKey="EcnPurchaseOrderId")]
		public EntitySet<EcnPurchaseOrderLine> EcnPurchaseOrderLines
		{
			get
			{
				return this._EcnPurchaseOrderLines;
			}
			set
			{
				this._EcnPurchaseOrderLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnPurchaseOrder", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnPurchaseOrders.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnPurchaseOrders.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnPurchaseOrderLines(EcnPurchaseOrderLine entity)
		{
			this.SendPropertyChanging();
			entity.EcnPurchaseOrder = this;
		}
		
		private void detach_EcnPurchaseOrderLines(EcnPurchaseOrderLine entity)
		{
			this.SendPropertyChanging();
			entity.EcnPurchaseOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnSalesOrderLines")]
	public partial class EcnSalesOrderLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SalesOrderLineRecordId;
		
		private int _EcnSalesOrderId;
		
		private int _LineNo;
		
		private string _PartNumber;
		
		private string _LineStatus;
		
		private System.Nullable<decimal> _OrderQty;
		
		private System.Nullable<decimal> _ShippedQty;
		
		private string _DescriptionBefore;
		
		private string _DescriptionAfter;
		
		private string _DrawingIdBefore;
		
		private string _DrawingIdAfter;
		
		private string _DrawingRevBefore;
		
		private string _DrawingRevAfter;
		
		private string _CustomerPartIdBefore;
		
		private string _CustomerPartIdAfter;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<EcnSalesOrder> _EcnSalesOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesOrderLineRecordIdChanging(string value);
    partial void OnSalesOrderLineRecordIdChanged();
    partial void OnEcnSalesOrderIdChanging(int value);
    partial void OnEcnSalesOrderIdChanged();
    partial void OnLineNoChanging(int value);
    partial void OnLineNoChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnLineStatusChanging(string value);
    partial void OnLineStatusChanged();
    partial void OnOrderQtyChanging(System.Nullable<decimal> value);
    partial void OnOrderQtyChanged();
    partial void OnShippedQtyChanging(System.Nullable<decimal> value);
    partial void OnShippedQtyChanged();
    partial void OnDescriptionBeforeChanging(string value);
    partial void OnDescriptionBeforeChanged();
    partial void OnDescriptionAfterChanging(string value);
    partial void OnDescriptionAfterChanged();
    partial void OnDrawingIdBeforeChanging(string value);
    partial void OnDrawingIdBeforeChanged();
    partial void OnDrawingIdAfterChanging(string value);
    partial void OnDrawingIdAfterChanged();
    partial void OnDrawingRevBeforeChanging(string value);
    partial void OnDrawingRevBeforeChanged();
    partial void OnDrawingRevAfterChanging(string value);
    partial void OnDrawingRevAfterChanged();
    partial void OnCustomerPartIdBeforeChanging(string value);
    partial void OnCustomerPartIdBeforeChanged();
    partial void OnCustomerPartIdAfterChanging(string value);
    partial void OnCustomerPartIdAfterChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnSalesOrderLine()
		{
			this._EcnSalesOrder = default(EntityRef<EcnSalesOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderLineRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SalesOrderLineRecordId
		{
			get
			{
				return this._SalesOrderLineRecordId;
			}
			set
			{
				if ((this._SalesOrderLineRecordId != value))
				{
					this.OnSalesOrderLineRecordIdChanging(value);
					this.SendPropertyChanging();
					this._SalesOrderLineRecordId = value;
					this.SendPropertyChanged("SalesOrderLineRecordId");
					this.OnSalesOrderLineRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnSalesOrderId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnSalesOrderId
		{
			get
			{
				return this._EcnSalesOrderId;
			}
			set
			{
				if ((this._EcnSalesOrderId != value))
				{
					if (this._EcnSalesOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnSalesOrderIdChanging(value);
					this.SendPropertyChanging();
					this._EcnSalesOrderId = value;
					this.SendPropertyChanged("EcnSalesOrderId");
					this.OnEcnSalesOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[LineNo]", Storage="_LineNo", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LineNo
		{
			get
			{
				return this._LineNo;
			}
			set
			{
				if ((this._LineNo != value))
				{
					this.OnLineNoChanging(value);
					this.SendPropertyChanging();
					this._LineNo = value;
					this.SendPropertyChanged("LineNo");
					this.OnLineNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineStatus", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string LineStatus
		{
			get
			{
				return this._LineStatus;
			}
			set
			{
				if ((this._LineStatus != value))
				{
					this.OnLineStatusChanging(value);
					this.SendPropertyChanging();
					this._LineStatus = value;
					this.SendPropertyChanged("LineStatus");
					this.OnLineStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderQty", DbType="Decimal(14,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> OrderQty
		{
			get
			{
				return this._OrderQty;
			}
			set
			{
				if ((this._OrderQty != value))
				{
					this.OnOrderQtyChanging(value);
					this.SendPropertyChanging();
					this._OrderQty = value;
					this.SendPropertyChanged("OrderQty");
					this.OnOrderQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShippedQty", DbType="Decimal(14,4)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> ShippedQty
		{
			get
			{
				return this._ShippedQty;
			}
			set
			{
				if ((this._ShippedQty != value))
				{
					this.OnShippedQtyChanging(value);
					this.SendPropertyChanging();
					this._ShippedQty = value;
					this.SendPropertyChanged("ShippedQty");
					this.OnShippedQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionBefore
		{
			get
			{
				return this._DescriptionBefore;
			}
			set
			{
				if ((this._DescriptionBefore != value))
				{
					this.OnDescriptionBeforeChanging(value);
					this.SendPropertyChanging();
					this._DescriptionBefore = value;
					this.SendPropertyChanged("DescriptionBefore");
					this.OnDescriptionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionAfter
		{
			get
			{
				return this._DescriptionAfter;
			}
			set
			{
				if ((this._DescriptionAfter != value))
				{
					this.OnDescriptionAfterChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAfter = value;
					this.SendPropertyChanged("DescriptionAfter");
					this.OnDescriptionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdBefore", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdBefore
		{
			get
			{
				return this._DrawingIdBefore;
			}
			set
			{
				if ((this._DrawingIdBefore != value))
				{
					this.OnDrawingIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdBefore = value;
					this.SendPropertyChanged("DrawingIdBefore");
					this.OnDrawingIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdAfter", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdAfter
		{
			get
			{
				return this._DrawingIdAfter;
			}
			set
			{
				if ((this._DrawingIdAfter != value))
				{
					this.OnDrawingIdAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdAfter = value;
					this.SendPropertyChanged("DrawingIdAfter");
					this.OnDrawingIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingRevBefore", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingRevBefore
		{
			get
			{
				return this._DrawingRevBefore;
			}
			set
			{
				if ((this._DrawingRevBefore != value))
				{
					this.OnDrawingRevBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingRevBefore = value;
					this.SendPropertyChanged("DrawingRevBefore");
					this.OnDrawingRevBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingRevAfter", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingRevAfter
		{
			get
			{
				return this._DrawingRevAfter;
			}
			set
			{
				if ((this._DrawingRevAfter != value))
				{
					this.OnDrawingRevAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingRevAfter = value;
					this.SendPropertyChanged("DrawingRevAfter");
					this.OnDrawingRevAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPartIdBefore", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string CustomerPartIdBefore
		{
			get
			{
				return this._CustomerPartIdBefore;
			}
			set
			{
				if ((this._CustomerPartIdBefore != value))
				{
					this.OnCustomerPartIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._CustomerPartIdBefore = value;
					this.SendPropertyChanged("CustomerPartIdBefore");
					this.OnCustomerPartIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPartIdAfter", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string CustomerPartIdAfter
		{
			get
			{
				return this._CustomerPartIdAfter;
			}
			set
			{
				if ((this._CustomerPartIdAfter != value))
				{
					this.OnCustomerPartIdAfterChanging(value);
					this.SendPropertyChanging();
					this._CustomerPartIdAfter = value;
					this.SendPropertyChanged("CustomerPartIdAfter");
					this.OnCustomerPartIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnSalesOrder_EcnSalesOrderLine", Storage="_EcnSalesOrder", ThisKey="EcnSalesOrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnSalesOrder EcnSalesOrder
		{
			get
			{
				return this._EcnSalesOrder.Entity;
			}
			set
			{
				EcnSalesOrder previousValue = this._EcnSalesOrder.Entity;
				if (((previousValue != value) 
							|| (this._EcnSalesOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnSalesOrder.Entity = null;
						previousValue.EcnSalesOrderLines.Remove(this);
					}
					this._EcnSalesOrder.Entity = value;
					if ((value != null))
					{
						value.EcnSalesOrderLines.Add(this);
						this._EcnSalesOrderId = value.Id;
					}
					else
					{
						this._EcnSalesOrderId = default(int);
					}
					this.SendPropertyChanged("EcnSalesOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnSalesOrders")]
	public partial class EcnSalesOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _SalesOrderRecordId;
		
		private int _EcnId;
		
		private string _SalesId;
		
		private string _CustomerId;
		
		private string _CustomerPo;
		
		private string _SalesRep;
		
		private string _OrderStatus;
		
		private System.DateTime _OrderDate;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnSalesOrderLine> _EcnSalesOrderLines;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnSalesOrderRecordIdChanging(string value);
    partial void OnSalesOrderRecordIdChanged();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnSalesIdChanging(string value);
    partial void OnSalesIdChanged();
    partial void OnCustomerIdChanging(string value);
    partial void OnCustomerIdChanged();
    partial void OnCustomerPoChanging(string value);
    partial void OnCustomerPoChanged();
    partial void OnSalesRepChanging(string value);
    partial void OnSalesRepChanged();
    partial void OnOrderStatusChanging(string value);
    partial void OnOrderStatusChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnSalesOrder()
		{
			this._EcnSalesOrderLines = new EntitySet<EcnSalesOrderLine>(new Action<EcnSalesOrderLine>(this.attach_EcnSalesOrderLines), new Action<EcnSalesOrderLine>(this.detach_EcnSalesOrderLines));
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesOrderRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SalesOrderRecordId
		{
			get
			{
				return this._SalesOrderRecordId;
			}
			set
			{
				if ((this._SalesOrderRecordId != value))
				{
					this.OnSalesOrderRecordIdChanging(value);
					this.SendPropertyChanging();
					this._SalesOrderRecordId = value;
					this.SendPropertyChanged("SalesOrderRecordId");
					this.OnSalesOrderRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SalesId
		{
			get
			{
				return this._SalesId;
			}
			set
			{
				if ((this._SalesId != value))
				{
					this.OnSalesIdChanging(value);
					this.SendPropertyChanging();
					this._SalesId = value;
					this.SendPropertyChanged("SalesId");
					this.OnSalesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerId", DbType="NVarChar(41)", UpdateCheck=UpdateCheck.Never)]
		public string CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPo", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string CustomerPo
		{
			get
			{
				return this._CustomerPo;
			}
			set
			{
				if ((this._CustomerPo != value))
				{
					this.OnCustomerPoChanging(value);
					this.SendPropertyChanging();
					this._CustomerPo = value;
					this.SendPropertyChanged("CustomerPo");
					this.OnCustomerPoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesRep", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string SalesRep
		{
			get
			{
				return this._SalesRep;
			}
			set
			{
				if ((this._SalesRep != value))
				{
					this.OnSalesRepChanging(value);
					this.SendPropertyChanging();
					this._SalesRep = value;
					this.SendPropertyChanged("SalesRep");
					this.OnSalesRepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderStatus", DbType="NVarChar(32)", UpdateCheck=UpdateCheck.Never)]
		public string OrderStatus
		{
			get
			{
				return this._OrderStatus;
			}
			set
			{
				if ((this._OrderStatus != value))
				{
					this.OnOrderStatusChanging(value);
					this.SendPropertyChanging();
					this._OrderStatus = value;
					this.SendPropertyChanged("OrderStatus");
					this.OnOrderStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnSalesOrder_EcnSalesOrderLine", Storage="_EcnSalesOrderLines", ThisKey="Id", OtherKey="EcnSalesOrderId")]
		public EntitySet<EcnSalesOrderLine> EcnSalesOrderLines
		{
			get
			{
				return this._EcnSalesOrderLines;
			}
			set
			{
				this._EcnSalesOrderLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnSalesOrder", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnSalesOrders.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnSalesOrders.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnSalesOrderLines(EcnSalesOrderLine entity)
		{
			this.SendPropertyChanging();
			entity.EcnSalesOrder = this;
		}
		
		private void detach_EcnSalesOrderLines(EcnSalesOrderLine entity)
		{
			this.SendPropertyChanging();
			entity.EcnSalesOrder = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnStandardChecks")]
	public partial class EcnStandardCheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ItemToCheck;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnCheck> _EcnChecks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemToCheckChanging(string value);
    partial void OnItemToCheckChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnStandardCheck()
		{
			this._EcnChecks = new EntitySet<EcnCheck>(new Action<EcnCheck>(this.attach_EcnChecks), new Action<EcnCheck>(this.detach_EcnChecks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemToCheck", DbType="NVarChar(1000)", UpdateCheck=UpdateCheck.Never)]
		public string ItemToCheck
		{
			get
			{
				return this._ItemToCheck;
			}
			set
			{
				if ((this._ItemToCheck != value))
				{
					this.OnItemToCheckChanging(value);
					this.SendPropertyChanging();
					this._ItemToCheck = value;
					this.SendPropertyChanged("ItemToCheck");
					this.OnItemToCheckChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnStandardCheck_EcnCheck", Storage="_EcnChecks", ThisKey="Id", OtherKey="StandardCheckId")]
		public EntitySet<EcnCheck> EcnChecks
		{
			get
			{
				return this._EcnChecks;
			}
			set
			{
				this._EcnChecks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnStandardCheck = this;
		}
		
		private void detach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnStandardCheck = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnWorkOrderMaterials")]
	public partial class EcnWorkOrderMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _MaterialRecordId;
		
		private int _EcnOperationId;
		
		private string _WorkId;
		
		private string _PartNumberBefore;
		
		private string _PartNumberAfter;
		
		private string _DescriptionBefore;
		
		private string _DescriptionAfter;
		
		private System.Nullable<int> _SeqNoBefore;
		
		private System.Nullable<int> _SeqNoAfter;
		
		private System.Nullable<int> _PieceNoBefore;
		
		private System.Nullable<int> _PieceNoAfter;
		
		private System.Nullable<decimal> _QtyPerBefore;
		
		private System.Nullable<decimal> _QtyPerAfter;
		
		private string _SpecificationsBefore;
		
		private string _SpecificationsAfter;
		
		private string _NotesBefore;
		
		private string _NotesAfter;
		
		private string _DrawingIdBefore;
		
		private string _DrawingIdAfter;
		
		private string _RevisionBefore;
		
		private string _RevisionAfter;
		
		private System.Nullable<short> _NumberOfPagesBefore;
		
		private System.Nullable<short> _NumberOfPagesAfter;
		
		private string _DrawingFileBefore;
		
		private string _DrawingFileAfter;
		
		private string _UomBefore;
		
		private string _UomAfter;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<EcnWorkOrderOperation> _EcnWorkOrderOperation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMaterialRecordIdChanging(string value);
    partial void OnMaterialRecordIdChanged();
    partial void OnEcnOperationIdChanging(int value);
    partial void OnEcnOperationIdChanged();
    partial void OnWorkIdChanging(string value);
    partial void OnWorkIdChanged();
    partial void OnPartNumberBeforeChanging(string value);
    partial void OnPartNumberBeforeChanged();
    partial void OnPartNumberAfterChanging(string value);
    partial void OnPartNumberAfterChanged();
    partial void OnDescriptionBeforeChanging(string value);
    partial void OnDescriptionBeforeChanged();
    partial void OnDescriptionAfterChanging(string value);
    partial void OnDescriptionAfterChanged();
    partial void OnSeqNoBeforeChanging(System.Nullable<int> value);
    partial void OnSeqNoBeforeChanged();
    partial void OnSeqNoAfterChanging(System.Nullable<int> value);
    partial void OnSeqNoAfterChanged();
    partial void OnPieceNoBeforeChanging(System.Nullable<int> value);
    partial void OnPieceNoBeforeChanged();
    partial void OnPieceNoAfterChanging(System.Nullable<int> value);
    partial void OnPieceNoAfterChanged();
    partial void OnQtyPerBeforeChanging(System.Nullable<decimal> value);
    partial void OnQtyPerBeforeChanged();
    partial void OnQtyPerAfterChanging(System.Nullable<decimal> value);
    partial void OnQtyPerAfterChanged();
    partial void OnSpecificationsBeforeChanging(string value);
    partial void OnSpecificationsBeforeChanged();
    partial void OnSpecificationsAfterChanging(string value);
    partial void OnSpecificationsAfterChanged();
    partial void OnNotesBeforeChanging(string value);
    partial void OnNotesBeforeChanged();
    partial void OnNotesAfterChanging(string value);
    partial void OnNotesAfterChanged();
    partial void OnDrawingIdBeforeChanging(string value);
    partial void OnDrawingIdBeforeChanged();
    partial void OnDrawingIdAfterChanging(string value);
    partial void OnDrawingIdAfterChanged();
    partial void OnRevisionBeforeChanging(string value);
    partial void OnRevisionBeforeChanged();
    partial void OnRevisionAfterChanging(string value);
    partial void OnRevisionAfterChanged();
    partial void OnNumberOfPagesBeforeChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesBeforeChanged();
    partial void OnNumberOfPagesAfterChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesAfterChanged();
    partial void OnDrawingFileBeforeChanging(string value);
    partial void OnDrawingFileBeforeChanged();
    partial void OnDrawingFileAfterChanging(string value);
    partial void OnDrawingFileAfterChanged();
    partial void OnUomBeforeChanging(string value);
    partial void OnUomBeforeChanged();
    partial void OnUomAfterChanging(string value);
    partial void OnUomAfterChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnWorkOrderMaterial()
		{
			this._EcnWorkOrderOperation = default(EntityRef<EcnWorkOrderOperation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string MaterialRecordId
		{
			get
			{
				return this._MaterialRecordId;
			}
			set
			{
				if ((this._MaterialRecordId != value))
				{
					this.OnMaterialRecordIdChanging(value);
					this.SendPropertyChanging();
					this._MaterialRecordId = value;
					this.SendPropertyChanged("MaterialRecordId");
					this.OnMaterialRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnOperationId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnOperationId
		{
			get
			{
				return this._EcnOperationId;
			}
			set
			{
				if ((this._EcnOperationId != value))
				{
					if (this._EcnWorkOrderOperation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnOperationIdChanging(value);
					this.SendPropertyChanging();
					this._EcnOperationId = value;
					this.SendPropertyChanged("EcnOperationId");
					this.OnEcnOperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string WorkId
		{
			get
			{
				return this._WorkId;
			}
			set
			{
				if ((this._WorkId != value))
				{
					this.OnWorkIdChanging(value);
					this.SendPropertyChanging();
					this._WorkId = value;
					this.SendPropertyChanged("WorkId");
					this.OnWorkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumberBefore", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string PartNumberBefore
		{
			get
			{
				return this._PartNumberBefore;
			}
			set
			{
				if ((this._PartNumberBefore != value))
				{
					this.OnPartNumberBeforeChanging(value);
					this.SendPropertyChanging();
					this._PartNumberBefore = value;
					this.SendPropertyChanged("PartNumberBefore");
					this.OnPartNumberBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumberAfter", DbType="NVarChar(160)", UpdateCheck=UpdateCheck.Never)]
		public string PartNumberAfter
		{
			get
			{
				return this._PartNumberAfter;
			}
			set
			{
				if ((this._PartNumberAfter != value))
				{
					this.OnPartNumberAfterChanging(value);
					this.SendPropertyChanging();
					this._PartNumberAfter = value;
					this.SendPropertyChanged("PartNumberAfter");
					this.OnPartNumberAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionBefore
		{
			get
			{
				return this._DescriptionBefore;
			}
			set
			{
				if ((this._DescriptionBefore != value))
				{
					this.OnDescriptionBeforeChanging(value);
					this.SendPropertyChanging();
					this._DescriptionBefore = value;
					this.SendPropertyChanged("DescriptionBefore");
					this.OnDescriptionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionAfter
		{
			get
			{
				return this._DescriptionAfter;
			}
			set
			{
				if ((this._DescriptionAfter != value))
				{
					this.OnDescriptionAfterChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAfter = value;
					this.SendPropertyChanged("DescriptionAfter");
					this.OnDescriptionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoBefore", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoBefore
		{
			get
			{
				return this._SeqNoBefore;
			}
			set
			{
				if ((this._SeqNoBefore != value))
				{
					this.OnSeqNoBeforeChanging(value);
					this.SendPropertyChanging();
					this._SeqNoBefore = value;
					this.SendPropertyChanged("SeqNoBefore");
					this.OnSeqNoBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoAfter", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoAfter
		{
			get
			{
				return this._SeqNoAfter;
			}
			set
			{
				if ((this._SeqNoAfter != value))
				{
					this.OnSeqNoAfterChanging(value);
					this.SendPropertyChanging();
					this._SeqNoAfter = value;
					this.SendPropertyChanged("SeqNoAfter");
					this.OnSeqNoAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceNoBefore", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PieceNoBefore
		{
			get
			{
				return this._PieceNoBefore;
			}
			set
			{
				if ((this._PieceNoBefore != value))
				{
					this.OnPieceNoBeforeChanging(value);
					this.SendPropertyChanging();
					this._PieceNoBefore = value;
					this.SendPropertyChanged("PieceNoBefore");
					this.OnPieceNoBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PieceNoAfter", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> PieceNoAfter
		{
			get
			{
				return this._PieceNoAfter;
			}
			set
			{
				if ((this._PieceNoAfter != value))
				{
					this.OnPieceNoAfterChanging(value);
					this.SendPropertyChanging();
					this._PieceNoAfter = value;
					this.SendPropertyChanged("PieceNoAfter");
					this.OnPieceNoAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPerBefore", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPerBefore
		{
			get
			{
				return this._QtyPerBefore;
			}
			set
			{
				if ((this._QtyPerBefore != value))
				{
					this.OnQtyPerBeforeChanging(value);
					this.SendPropertyChanging();
					this._QtyPerBefore = value;
					this.SendPropertyChanged("QtyPerBefore");
					this.OnQtyPerBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyPerAfter", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> QtyPerAfter
		{
			get
			{
				return this._QtyPerAfter;
			}
			set
			{
				if ((this._QtyPerAfter != value))
				{
					this.OnQtyPerAfterChanging(value);
					this.SendPropertyChanging();
					this._QtyPerAfter = value;
					this.SendPropertyChanged("QtyPerAfter");
					this.OnQtyPerAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationsBefore", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SpecificationsBefore
		{
			get
			{
				return this._SpecificationsBefore;
			}
			set
			{
				if ((this._SpecificationsBefore != value))
				{
					this.OnSpecificationsBeforeChanging(value);
					this.SendPropertyChanging();
					this._SpecificationsBefore = value;
					this.SendPropertyChanged("SpecificationsBefore");
					this.OnSpecificationsBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationsAfter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string SpecificationsAfter
		{
			get
			{
				return this._SpecificationsAfter;
			}
			set
			{
				if ((this._SpecificationsAfter != value))
				{
					this.OnSpecificationsAfterChanging(value);
					this.SendPropertyChanging();
					this._SpecificationsAfter = value;
					this.SendPropertyChanged("SpecificationsAfter");
					this.OnSpecificationsAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesBefore", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NotesBefore
		{
			get
			{
				return this._NotesBefore;
			}
			set
			{
				if ((this._NotesBefore != value))
				{
					this.OnNotesBeforeChanging(value);
					this.SendPropertyChanging();
					this._NotesBefore = value;
					this.SendPropertyChanged("NotesBefore");
					this.OnNotesBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotesAfter", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string NotesAfter
		{
			get
			{
				return this._NotesAfter;
			}
			set
			{
				if ((this._NotesAfter != value))
				{
					this.OnNotesAfterChanging(value);
					this.SendPropertyChanging();
					this._NotesAfter = value;
					this.SendPropertyChanged("NotesAfter");
					this.OnNotesAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdBefore", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdBefore
		{
			get
			{
				return this._DrawingIdBefore;
			}
			set
			{
				if ((this._DrawingIdBefore != value))
				{
					this.OnDrawingIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdBefore = value;
					this.SendPropertyChanged("DrawingIdBefore");
					this.OnDrawingIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdAfter", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdAfter
		{
			get
			{
				return this._DrawingIdAfter;
			}
			set
			{
				if ((this._DrawingIdAfter != value))
				{
					this.OnDrawingIdAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdAfter = value;
					this.SendPropertyChanged("DrawingIdAfter");
					this.OnDrawingIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionBefore", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionBefore
		{
			get
			{
				return this._RevisionBefore;
			}
			set
			{
				if ((this._RevisionBefore != value))
				{
					this.OnRevisionBeforeChanging(value);
					this.SendPropertyChanging();
					this._RevisionBefore = value;
					this.SendPropertyChanged("RevisionBefore");
					this.OnRevisionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionAfter", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionAfter
		{
			get
			{
				return this._RevisionAfter;
			}
			set
			{
				if ((this._RevisionAfter != value))
				{
					this.OnRevisionAfterChanging(value);
					this.SendPropertyChanging();
					this._RevisionAfter = value;
					this.SendPropertyChanged("RevisionAfter");
					this.OnRevisionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesBefore", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesBefore
		{
			get
			{
				return this._NumberOfPagesBefore;
			}
			set
			{
				if ((this._NumberOfPagesBefore != value))
				{
					this.OnNumberOfPagesBeforeChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesBefore = value;
					this.SendPropertyChanged("NumberOfPagesBefore");
					this.OnNumberOfPagesBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesAfter", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesAfter
		{
			get
			{
				return this._NumberOfPagesAfter;
			}
			set
			{
				if ((this._NumberOfPagesAfter != value))
				{
					this.OnNumberOfPagesAfterChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesAfter = value;
					this.SendPropertyChanged("NumberOfPagesAfter");
					this.OnNumberOfPagesAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileBefore
		{
			get
			{
				return this._DrawingFileBefore;
			}
			set
			{
				if ((this._DrawingFileBefore != value))
				{
					this.OnDrawingFileBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileBefore = value;
					this.SendPropertyChanged("DrawingFileBefore");
					this.OnDrawingFileBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileAfter
		{
			get
			{
				return this._DrawingFileAfter;
			}
			set
			{
				if ((this._DrawingFileAfter != value))
				{
					this.OnDrawingFileAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileAfter = value;
					this.SendPropertyChanged("DrawingFileAfter");
					this.OnDrawingFileAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UomBefore", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string UomBefore
		{
			get
			{
				return this._UomBefore;
			}
			set
			{
				if ((this._UomBefore != value))
				{
					this.OnUomBeforeChanging(value);
					this.SendPropertyChanging();
					this._UomBefore = value;
					this.SendPropertyChanged("UomBefore");
					this.OnUomBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UomAfter", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string UomAfter
		{
			get
			{
				return this._UomAfter;
			}
			set
			{
				if ((this._UomAfter != value))
				{
					this.OnUomAfterChanging(value);
					this.SendPropertyChanging();
					this._UomAfter = value;
					this.SendPropertyChanged("UomAfter");
					this.OnUomAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnWorkOrderOperation_EcnWorkOrderMaterial", Storage="_EcnWorkOrderOperation", ThisKey="EcnOperationId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnWorkOrderOperation EcnWorkOrderOperation
		{
			get
			{
				return this._EcnWorkOrderOperation.Entity;
			}
			set
			{
				EcnWorkOrderOperation previousValue = this._EcnWorkOrderOperation.Entity;
				if (((previousValue != value) 
							|| (this._EcnWorkOrderOperation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnWorkOrderOperation.Entity = null;
						previousValue.EcnWorkOrderMaterials.Remove(this);
					}
					this._EcnWorkOrderOperation.Entity = value;
					if ((value != null))
					{
						value.EcnWorkOrderMaterials.Add(this);
						this._EcnOperationId = value.Id;
					}
					else
					{
						this._EcnOperationId = default(int);
					}
					this.SendPropertyChanged("EcnWorkOrderOperation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnWorkOrderOperations")]
	public partial class EcnWorkOrderOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _OperationRecordId;
		
		private int _EcnOpenWorkOrderId;
		
		private System.Nullable<int> _SeqNoBefore;
		
		private System.Nullable<int> _SeqNoAfter;
		
		private string _ResourceIdBefore;
		
		private string _ResourceIdAfter;
		
		private string _DescriptionBefore;
		
		private string _DescriptionAfter;
		
		private string _TemplateIdBefore;
		
		private string _TemplateIdAfter;
		
		private string _ServiceIdBefore;
		
		private string _ServiceIdAfter;
		
		private string _SupplierIdBefore;
		
		private string _SupplierIdAfter;
		
		private System.Nullable<decimal> _SetupHoursBefore;
		
		private System.Nullable<decimal> _SetupHoursAfter;
		
		private System.Nullable<decimal> _RunPerHourBefore;
		
		private System.Nullable<decimal> _RunPerHourAfter;
		
		private string _DrawingIdBefore;
		
		private string _DrawingIdAfter;
		
		private string _RevisionBefore;
		
		private string _RevisionAfter;
		
		private System.Nullable<short> _NumberOfPagesBefore;
		
		private System.Nullable<short> _NumberOfPagesAfter;
		
		private string _DrawingFileBefore;
		
		private string _DrawingFileAfter;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EcnWorkOrderMaterial> _EcnWorkOrderMaterials;
		
		private EntityRef<EcnOpenWorkOrder> _EcnOpenWorkOrder;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnOperationRecordIdChanging(string value);
    partial void OnOperationRecordIdChanged();
    partial void OnEcnOpenWorkOrderIdChanging(int value);
    partial void OnEcnOpenWorkOrderIdChanged();
    partial void OnSeqNoBeforeChanging(System.Nullable<int> value);
    partial void OnSeqNoBeforeChanged();
    partial void OnSeqNoAfterChanging(System.Nullable<int> value);
    partial void OnSeqNoAfterChanged();
    partial void OnResourceIdBeforeChanging(string value);
    partial void OnResourceIdBeforeChanged();
    partial void OnResourceIdAfterChanging(string value);
    partial void OnResourceIdAfterChanged();
    partial void OnDescriptionBeforeChanging(string value);
    partial void OnDescriptionBeforeChanged();
    partial void OnDescriptionAfterChanging(string value);
    partial void OnDescriptionAfterChanged();
    partial void OnTemplateIdBeforeChanging(string value);
    partial void OnTemplateIdBeforeChanged();
    partial void OnTemplateIdAfterChanging(string value);
    partial void OnTemplateIdAfterChanged();
    partial void OnServiceIdBeforeChanging(string value);
    partial void OnServiceIdBeforeChanged();
    partial void OnServiceIdAfterChanging(string value);
    partial void OnServiceIdAfterChanged();
    partial void OnSupplierIdBeforeChanging(string value);
    partial void OnSupplierIdBeforeChanged();
    partial void OnSupplierIdAfterChanging(string value);
    partial void OnSupplierIdAfterChanged();
    partial void OnSetupHoursBeforeChanging(System.Nullable<decimal> value);
    partial void OnSetupHoursBeforeChanged();
    partial void OnSetupHoursAfterChanging(System.Nullable<decimal> value);
    partial void OnSetupHoursAfterChanged();
    partial void OnRunPerHourBeforeChanging(System.Nullable<decimal> value);
    partial void OnRunPerHourBeforeChanged();
    partial void OnRunPerHourAfterChanging(System.Nullable<decimal> value);
    partial void OnRunPerHourAfterChanged();
    partial void OnDrawingIdBeforeChanging(string value);
    partial void OnDrawingIdBeforeChanged();
    partial void OnDrawingIdAfterChanging(string value);
    partial void OnDrawingIdAfterChanged();
    partial void OnRevisionBeforeChanging(string value);
    partial void OnRevisionBeforeChanged();
    partial void OnRevisionAfterChanging(string value);
    partial void OnRevisionAfterChanged();
    partial void OnNumberOfPagesBeforeChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesBeforeChanged();
    partial void OnNumberOfPagesAfterChanging(System.Nullable<short> value);
    partial void OnNumberOfPagesAfterChanged();
    partial void OnDrawingFileBeforeChanging(string value);
    partial void OnDrawingFileBeforeChanged();
    partial void OnDrawingFileAfterChanging(string value);
    partial void OnDrawingFileAfterChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EcnWorkOrderOperation()
		{
			this._EcnWorkOrderMaterials = new EntitySet<EcnWorkOrderMaterial>(new Action<EcnWorkOrderMaterial>(this.attach_EcnWorkOrderMaterials), new Action<EcnWorkOrderMaterial>(this.detach_EcnWorkOrderMaterials));
			this._EcnOpenWorkOrder = default(EntityRef<EcnOpenWorkOrder>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationRecordId", DbType="NVarChar(12) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string OperationRecordId
		{
			get
			{
				return this._OperationRecordId;
			}
			set
			{
				if ((this._OperationRecordId != value))
				{
					this.OnOperationRecordIdChanging(value);
					this.SendPropertyChanging();
					this._OperationRecordId = value;
					this.SendPropertyChanged("OperationRecordId");
					this.OnOperationRecordIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnOpenWorkOrderId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EcnOpenWorkOrderId
		{
			get
			{
				return this._EcnOpenWorkOrderId;
			}
			set
			{
				if ((this._EcnOpenWorkOrderId != value))
				{
					if (this._EcnOpenWorkOrder.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnOpenWorkOrderIdChanging(value);
					this.SendPropertyChanging();
					this._EcnOpenWorkOrderId = value;
					this.SendPropertyChanged("EcnOpenWorkOrderId");
					this.OnEcnOpenWorkOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoBefore", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoBefore
		{
			get
			{
				return this._SeqNoBefore;
			}
			set
			{
				if ((this._SeqNoBefore != value))
				{
					this.OnSeqNoBeforeChanging(value);
					this.SendPropertyChanging();
					this._SeqNoBefore = value;
					this.SendPropertyChanged("SeqNoBefore");
					this.OnSeqNoBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeqNoAfter", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> SeqNoAfter
		{
			get
			{
				return this._SeqNoAfter;
			}
			set
			{
				if ((this._SeqNoAfter != value))
				{
					this.OnSeqNoAfterChanging(value);
					this.SendPropertyChanging();
					this._SeqNoAfter = value;
					this.SendPropertyChanged("SeqNoAfter");
					this.OnSeqNoAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceIdBefore", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string ResourceIdBefore
		{
			get
			{
				return this._ResourceIdBefore;
			}
			set
			{
				if ((this._ResourceIdBefore != value))
				{
					this.OnResourceIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._ResourceIdBefore = value;
					this.SendPropertyChanged("ResourceIdBefore");
					this.OnResourceIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceIdAfter", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string ResourceIdAfter
		{
			get
			{
				return this._ResourceIdAfter;
			}
			set
			{
				if ((this._ResourceIdAfter != value))
				{
					this.OnResourceIdAfterChanging(value);
					this.SendPropertyChanging();
					this._ResourceIdAfter = value;
					this.SendPropertyChanged("ResourceIdAfter");
					this.OnResourceIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionBefore
		{
			get
			{
				return this._DescriptionBefore;
			}
			set
			{
				if ((this._DescriptionBefore != value))
				{
					this.OnDescriptionBeforeChanging(value);
					this.SendPropertyChanging();
					this._DescriptionBefore = value;
					this.SendPropertyChanged("DescriptionBefore");
					this.OnDescriptionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DescriptionAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DescriptionAfter
		{
			get
			{
				return this._DescriptionAfter;
			}
			set
			{
				if ((this._DescriptionAfter != value))
				{
					this.OnDescriptionAfterChanging(value);
					this.SendPropertyChanging();
					this._DescriptionAfter = value;
					this.SendPropertyChanged("DescriptionAfter");
					this.OnDescriptionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateIdBefore", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string TemplateIdBefore
		{
			get
			{
				return this._TemplateIdBefore;
			}
			set
			{
				if ((this._TemplateIdBefore != value))
				{
					this.OnTemplateIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._TemplateIdBefore = value;
					this.SendPropertyChanged("TemplateIdBefore");
					this.OnTemplateIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TemplateIdAfter", DbType="NVarChar(15)", UpdateCheck=UpdateCheck.Never)]
		public string TemplateIdAfter
		{
			get
			{
				return this._TemplateIdAfter;
			}
			set
			{
				if ((this._TemplateIdAfter != value))
				{
					this.OnTemplateIdAfterChanging(value);
					this.SendPropertyChanging();
					this._TemplateIdAfter = value;
					this.SendPropertyChanged("TemplateIdAfter");
					this.OnTemplateIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceIdBefore", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string ServiceIdBefore
		{
			get
			{
				return this._ServiceIdBefore;
			}
			set
			{
				if ((this._ServiceIdBefore != value))
				{
					this.OnServiceIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._ServiceIdBefore = value;
					this.SendPropertyChanged("ServiceIdBefore");
					this.OnServiceIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceIdAfter", DbType="NVarChar(128)", UpdateCheck=UpdateCheck.Never)]
		public string ServiceIdAfter
		{
			get
			{
				return this._ServiceIdAfter;
			}
			set
			{
				if ((this._ServiceIdAfter != value))
				{
					this.OnServiceIdAfterChanging(value);
					this.SendPropertyChanging();
					this._ServiceIdAfter = value;
					this.SendPropertyChanged("ServiceIdAfter");
					this.OnServiceIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierIdBefore", DbType="NVarChar(41)", UpdateCheck=UpdateCheck.Never)]
		public string SupplierIdBefore
		{
			get
			{
				return this._SupplierIdBefore;
			}
			set
			{
				if ((this._SupplierIdBefore != value))
				{
					this.OnSupplierIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._SupplierIdBefore = value;
					this.SendPropertyChanged("SupplierIdBefore");
					this.OnSupplierIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierIdAfter", DbType="NVarChar(41)", UpdateCheck=UpdateCheck.Never)]
		public string SupplierIdAfter
		{
			get
			{
				return this._SupplierIdAfter;
			}
			set
			{
				if ((this._SupplierIdAfter != value))
				{
					this.OnSupplierIdAfterChanging(value);
					this.SendPropertyChanging();
					this._SupplierIdAfter = value;
					this.SendPropertyChanged("SupplierIdAfter");
					this.OnSupplierIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetupHoursBefore", DbType="Decimal(14,6)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> SetupHoursBefore
		{
			get
			{
				return this._SetupHoursBefore;
			}
			set
			{
				if ((this._SetupHoursBefore != value))
				{
					this.OnSetupHoursBeforeChanging(value);
					this.SendPropertyChanging();
					this._SetupHoursBefore = value;
					this.SendPropertyChanged("SetupHoursBefore");
					this.OnSetupHoursBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetupHoursAfter", DbType="Decimal(14,6)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> SetupHoursAfter
		{
			get
			{
				return this._SetupHoursAfter;
			}
			set
			{
				if ((this._SetupHoursAfter != value))
				{
					this.OnSetupHoursAfterChanging(value);
					this.SendPropertyChanging();
					this._SetupHoursAfter = value;
					this.SendPropertyChanged("SetupHoursAfter");
					this.OnSetupHoursAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunPerHourBefore", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RunPerHourBefore
		{
			get
			{
				return this._RunPerHourBefore;
			}
			set
			{
				if ((this._RunPerHourBefore != value))
				{
					this.OnRunPerHourBeforeChanging(value);
					this.SendPropertyChanging();
					this._RunPerHourBefore = value;
					this.SendPropertyChanged("RunPerHourBefore");
					this.OnRunPerHourBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RunPerHourAfter", DbType="Decimal(15,8)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<decimal> RunPerHourAfter
		{
			get
			{
				return this._RunPerHourAfter;
			}
			set
			{
				if ((this._RunPerHourAfter != value))
				{
					this.OnRunPerHourAfterChanging(value);
					this.SendPropertyChanging();
					this._RunPerHourAfter = value;
					this.SendPropertyChanged("RunPerHourAfter");
					this.OnRunPerHourAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdBefore", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdBefore
		{
			get
			{
				return this._DrawingIdBefore;
			}
			set
			{
				if ((this._DrawingIdBefore != value))
				{
					this.OnDrawingIdBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdBefore = value;
					this.SendPropertyChanged("DrawingIdBefore");
					this.OnDrawingIdBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingIdAfter", DbType="NVarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingIdAfter
		{
			get
			{
				return this._DrawingIdAfter;
			}
			set
			{
				if ((this._DrawingIdAfter != value))
				{
					this.OnDrawingIdAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingIdAfter = value;
					this.SendPropertyChanged("DrawingIdAfter");
					this.OnDrawingIdAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionBefore", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionBefore
		{
			get
			{
				return this._RevisionBefore;
			}
			set
			{
				if ((this._RevisionBefore != value))
				{
					this.OnRevisionBeforeChanging(value);
					this.SendPropertyChanging();
					this._RevisionBefore = value;
					this.SendPropertyChanged("RevisionBefore");
					this.OnRevisionBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevisionAfter", DbType="NVarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string RevisionAfter
		{
			get
			{
				return this._RevisionAfter;
			}
			set
			{
				if ((this._RevisionAfter != value))
				{
					this.OnRevisionAfterChanging(value);
					this.SendPropertyChanging();
					this._RevisionAfter = value;
					this.SendPropertyChanged("RevisionAfter");
					this.OnRevisionAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesBefore", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesBefore
		{
			get
			{
				return this._NumberOfPagesBefore;
			}
			set
			{
				if ((this._NumberOfPagesBefore != value))
				{
					this.OnNumberOfPagesBeforeChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesBefore = value;
					this.SendPropertyChanged("NumberOfPagesBefore");
					this.OnNumberOfPagesBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfPagesAfter", DbType="SmallInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<short> NumberOfPagesAfter
		{
			get
			{
				return this._NumberOfPagesAfter;
			}
			set
			{
				if ((this._NumberOfPagesAfter != value))
				{
					this.OnNumberOfPagesAfterChanging(value);
					this.SendPropertyChanging();
					this._NumberOfPagesAfter = value;
					this.SendPropertyChanged("NumberOfPagesAfter");
					this.OnNumberOfPagesAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileBefore", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileBefore
		{
			get
			{
				return this._DrawingFileBefore;
			}
			set
			{
				if ((this._DrawingFileBefore != value))
				{
					this.OnDrawingFileBeforeChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileBefore = value;
					this.SendPropertyChanged("DrawingFileBefore");
					this.OnDrawingFileBeforeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingFileAfter", DbType="NVarChar(250)", UpdateCheck=UpdateCheck.Never)]
		public string DrawingFileAfter
		{
			get
			{
				return this._DrawingFileAfter;
			}
			set
			{
				if ((this._DrawingFileAfter != value))
				{
					this.OnDrawingFileAfterChanging(value);
					this.SendPropertyChanging();
					this._DrawingFileAfter = value;
					this.SendPropertyChanged("DrawingFileAfter");
					this.OnDrawingFileAfterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnWorkOrderOperation_EcnWorkOrderMaterial", Storage="_EcnWorkOrderMaterials", ThisKey="Id", OtherKey="EcnOperationId")]
		public EntitySet<EcnWorkOrderMaterial> EcnWorkOrderMaterials
		{
			get
			{
				return this._EcnWorkOrderMaterials;
			}
			set
			{
				this._EcnWorkOrderMaterials.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnOpenWorkOrder_EcnWorkOrderOperation", Storage="_EcnOpenWorkOrder", ThisKey="EcnOpenWorkOrderId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnOpenWorkOrder EcnOpenWorkOrder
		{
			get
			{
				return this._EcnOpenWorkOrder.Entity;
			}
			set
			{
				EcnOpenWorkOrder previousValue = this._EcnOpenWorkOrder.Entity;
				if (((previousValue != value) 
							|| (this._EcnOpenWorkOrder.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnOpenWorkOrder.Entity = null;
						previousValue.EcnWorkOrderOperations.Remove(this);
					}
					this._EcnOpenWorkOrder.Entity = value;
					if ((value != null))
					{
						value.EcnWorkOrderOperations.Add(this);
						this._EcnOpenWorkOrderId = value.Id;
					}
					else
					{
						this._EcnOpenWorkOrderId = default(int);
					}
					this.SendPropertyChanged("EcnOpenWorkOrder");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnWorkOrderMaterials(EcnWorkOrderMaterial entity)
		{
			this.SendPropertyChanging();
			entity.EcnWorkOrderOperation = this;
		}
		
		private void detach_EcnWorkOrderMaterials(EcnWorkOrderMaterial entity)
		{
			this.SendPropertyChanging();
			entity.EcnWorkOrderOperation = null;
		}
	}
}
#pragma warning restore 1591
