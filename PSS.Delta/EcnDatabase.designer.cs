#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PSS.Delta
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Engineering")]
	public partial class EcnDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEcnCheck(EcnCheck instance);
    partial void UpdateEcnCheck(EcnCheck instance);
    partial void DeleteEcnCheck(EcnCheck instance);
    partial void InsertEcnStandardCheck(EcnStandardCheck instance);
    partial void UpdateEcnStandardCheck(EcnStandardCheck instance);
    partial void DeleteEcnStandardCheck(EcnStandardCheck instance);
    partial void InsertEcnInventoryOnHand(EcnInventoryOnHand instance);
    partial void UpdateEcnInventoryOnHand(EcnInventoryOnHand instance);
    partial void DeleteEcnInventoryOnHand(EcnInventoryOnHand instance);
    partial void InsertEcnPurchaseOrder(EcnPurchaseOrder instance);
    partial void UpdateEcnPurchaseOrder(EcnPurchaseOrder instance);
    partial void DeleteEcnPurchaseOrder(EcnPurchaseOrder instance);
    partial void InsertEcnSalesOrder(EcnSalesOrder instance);
    partial void UpdateEcnSalesOrder(EcnSalesOrder instance);
    partial void DeleteEcnSalesOrder(EcnSalesOrder instance);
    partial void InsertEcnHeader(EcnHeader instance);
    partial void UpdateEcnHeader(EcnHeader instance);
    partial void DeleteEcnHeader(EcnHeader instance);
    partial void InsertEcnOpenWorkOrder(EcnOpenWorkOrder instance);
    partial void UpdateEcnOpenWorkOrder(EcnOpenWorkOrder instance);
    partial void DeleteEcnOpenWorkOrder(EcnOpenWorkOrder instance);
    #endregion
		
		public EcnDatabaseDataContext() : 
				base(global::PSS.Delta.Properties.Settings.Default.EngineeringConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EcnDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EcnCheck> EcnChecks
		{
			get
			{
				return this.GetTable<EcnCheck>();
			}
		}
		
		public System.Data.Linq.Table<EcnStandardCheck> EcnStandardChecks
		{
			get
			{
				return this.GetTable<EcnStandardCheck>();
			}
		}
		
		public System.Data.Linq.Table<EcnInventoryOnHand> EcnInventoryOnHands
		{
			get
			{
				return this.GetTable<EcnInventoryOnHand>();
			}
		}
		
		public System.Data.Linq.Table<EcnPurchaseOrder> EcnPurchaseOrders
		{
			get
			{
				return this.GetTable<EcnPurchaseOrder>();
			}
		}
		
		public System.Data.Linq.Table<EcnSalesOrder> EcnSalesOrders
		{
			get
			{
				return this.GetTable<EcnSalesOrder>();
			}
		}
		
		public System.Data.Linq.Table<EcnHeader> EcnHeaders
		{
			get
			{
				return this.GetTable<EcnHeader>();
			}
		}
		
		public System.Data.Linq.Table<EcnOpenWorkOrder> EcnOpenWorkOrders
		{
			get
			{
				return this.GetTable<EcnOpenWorkOrder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnChecks")]
	public partial class EcnCheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EcnId;
		
		private int _StandardCheckId;
		
		private bool _Completed;
		
		private string _Notes;
		
		private EntityRef<EcnStandardCheck> _EcnStandardCheck;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnStandardCheckIdChanging(int value);
    partial void OnStandardCheckIdChanged();
    partial void OnCompletedChanging(bool value);
    partial void OnCompletedChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    #endregion
		
		public EcnCheck()
		{
			this._EcnStandardCheck = default(EntityRef<EcnStandardCheck>);
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StandardCheckId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StandardCheckId
		{
			get
			{
				return this._StandardCheckId;
			}
			set
			{
				if ((this._StandardCheckId != value))
				{
					if (this._EcnStandardCheck.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStandardCheckIdChanging(value);
					this.SendPropertyChanging();
					this._StandardCheckId = value;
					this.SendPropertyChanged("StandardCheckId");
					this.OnStandardCheckIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Completed", DbType="Bit NOT NULL")]
		public bool Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this.OnCompletedChanging(value);
					this.SendPropertyChanging();
					this._Completed = value;
					this.SendPropertyChanged("Completed");
					this.OnCompletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(500)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnStandardCheck_EcnCheck", Storage="_EcnStandardCheck", ThisKey="StandardCheckId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnStandardCheck EcnStandardCheck
		{
			get
			{
				return this._EcnStandardCheck.Entity;
			}
			set
			{
				EcnStandardCheck previousValue = this._EcnStandardCheck.Entity;
				if (((previousValue != value) 
							|| (this._EcnStandardCheck.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnStandardCheck.Entity = null;
						previousValue.EcnChecks.Remove(this);
					}
					this._EcnStandardCheck.Entity = value;
					if ((value != null))
					{
						value.EcnChecks.Add(this);
						this._StandardCheckId = value.Id;
					}
					else
					{
						this._StandardCheckId = default(int);
					}
					this.SendPropertyChanged("EcnStandardCheck");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnCheck", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnChecks.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnChecks.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnStandardChecks")]
	public partial class EcnStandardCheck : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ItemToCheck;
		
		private EntitySet<EcnCheck> _EcnChecks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemToCheckChanging(string value);
    partial void OnItemToCheckChanged();
    #endregion
		
		public EcnStandardCheck()
		{
			this._EcnChecks = new EntitySet<EcnCheck>(new Action<EcnCheck>(this.attach_EcnChecks), new Action<EcnCheck>(this.detach_EcnChecks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemToCheck", DbType="NVarChar(1000)")]
		public string ItemToCheck
		{
			get
			{
				return this._ItemToCheck;
			}
			set
			{
				if ((this._ItemToCheck != value))
				{
					this.OnItemToCheckChanging(value);
					this.SendPropertyChanging();
					this._ItemToCheck = value;
					this.SendPropertyChanged("ItemToCheck");
					this.OnItemToCheckChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnStandardCheck_EcnCheck", Storage="_EcnChecks", ThisKey="Id", OtherKey="StandardCheckId")]
		public EntitySet<EcnCheck> EcnChecks
		{
			get
			{
				return this._EcnChecks;
			}
			set
			{
				this._EcnChecks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnStandardCheck = this;
		}
		
		private void detach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnStandardCheck = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnInventoryOnHand")]
	public partial class EcnInventoryOnHand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EcnId;
		
		private string _PartId;
		
		private string _LocationId;
		
		private System.Nullable<decimal> _QtyOnHand;
		
		private string _Notes;
		
		private System.Nullable<bool> _Reworkable;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnPartIdChanging(string value);
    partial void OnPartIdChanged();
    partial void OnLocationIdChanging(string value);
    partial void OnLocationIdChanged();
    partial void OnQtyOnHandChanging(System.Nullable<decimal> value);
    partial void OnQtyOnHandChanged();
    partial void OnNotesChanging(string value);
    partial void OnNotesChanged();
    partial void OnReworkableChanging(System.Nullable<bool> value);
    partial void OnReworkableChanged();
    #endregion
		
		public EcnInventoryOnHand()
		{
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartId", DbType="NVarChar(160) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PartId
		{
			get
			{
				return this._PartId;
			}
			set
			{
				if ((this._PartId != value))
				{
					this.OnPartIdChanging(value);
					this.SendPropertyChanging();
					this._PartId = value;
					this.SendPropertyChanged("PartId");
					this.OnPartIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LocationId
		{
			get
			{
				return this._LocationId;
			}
			set
			{
				if ((this._LocationId != value))
				{
					this.OnLocationIdChanging(value);
					this.SendPropertyChanging();
					this._LocationId = value;
					this.SendPropertyChanged("LocationId");
					this.OnLocationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QtyOnHand", DbType="Decimal(14,4)")]
		public System.Nullable<decimal> QtyOnHand
		{
			get
			{
				return this._QtyOnHand;
			}
			set
			{
				if ((this._QtyOnHand != value))
				{
					this.OnQtyOnHandChanging(value);
					this.SendPropertyChanging();
					this._QtyOnHand = value;
					this.SendPropertyChanged("QtyOnHand");
					this.OnQtyOnHandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Notes", DbType="NVarChar(250)")]
		public string Notes
		{
			get
			{
				return this._Notes;
			}
			set
			{
				if ((this._Notes != value))
				{
					this.OnNotesChanging(value);
					this.SendPropertyChanging();
					this._Notes = value;
					this.SendPropertyChanged("Notes");
					this.OnNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reworkable", DbType="Bit")]
		public System.Nullable<bool> Reworkable
		{
			get
			{
				return this._Reworkable;
			}
			set
			{
				if ((this._Reworkable != value))
				{
					this.OnReworkableChanging(value);
					this.SendPropertyChanging();
					this._Reworkable = value;
					this.SendPropertyChanged("Reworkable");
					this.OnReworkableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnInventoryOnHand", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnInventoryOnHands.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnInventoryOnHands.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnPurchaseOrders")]
	public partial class EcnPurchaseOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EcnId;
		
		private string _PurchaseId;
		
		private int _PurchaseLineNo;
		
		private System.Nullable<bool> _WasContacted;
		
		private System.Nullable<int> _ContactId;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnPurchaseIdChanging(string value);
    partial void OnPurchaseIdChanged();
    partial void OnPurchaseLineNoChanging(int value);
    partial void OnPurchaseLineNoChanged();
    partial void OnWasContactedChanging(System.Nullable<bool> value);
    partial void OnWasContactedChanged();
    partial void OnContactIdChanging(System.Nullable<int> value);
    partial void OnContactIdChanged();
    #endregion
		
		public EcnPurchaseOrder()
		{
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PurchaseId
		{
			get
			{
				return this._PurchaseId;
			}
			set
			{
				if ((this._PurchaseId != value))
				{
					this.OnPurchaseIdChanging(value);
					this.SendPropertyChanging();
					this._PurchaseId = value;
					this.SendPropertyChanged("PurchaseId");
					this.OnPurchaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseLineNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PurchaseLineNo
		{
			get
			{
				return this._PurchaseLineNo;
			}
			set
			{
				if ((this._PurchaseLineNo != value))
				{
					this.OnPurchaseLineNoChanging(value);
					this.SendPropertyChanging();
					this._PurchaseLineNo = value;
					this.SendPropertyChanged("PurchaseLineNo");
					this.OnPurchaseLineNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasContacted", DbType="Bit")]
		public System.Nullable<bool> WasContacted
		{
			get
			{
				return this._WasContacted;
			}
			set
			{
				if ((this._WasContacted != value))
				{
					this.OnWasContactedChanging(value);
					this.SendPropertyChanging();
					this._WasContacted = value;
					this.SendPropertyChanged("WasContacted");
					this.OnWasContactedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int")]
		public System.Nullable<int> ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnPurchaseOrder", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnPurchaseOrders.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnPurchaseOrders.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnSalesOrders")]
	public partial class EcnSalesOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EcnId;
		
		private string _SalesId;
		
		private int _SalesLineNo;
		
		private string _Description;
		
		private string _DrawingId;
		
		private string _DrawingRevision;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnSalesIdChanging(string value);
    partial void OnSalesIdChanged();
    partial void OnSalesLineNoChanging(int value);
    partial void OnSalesLineNoChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDrawingIdChanging(string value);
    partial void OnDrawingIdChanged();
    partial void OnDrawingRevisionChanging(string value);
    partial void OnDrawingRevisionChanged();
    #endregion
		
		public EcnSalesOrder()
		{
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SalesId
		{
			get
			{
				return this._SalesId;
			}
			set
			{
				if ((this._SalesId != value))
				{
					this.OnSalesIdChanging(value);
					this.SendPropertyChanging();
					this._SalesId = value;
					this.SendPropertyChanged("SalesId");
					this.OnSalesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesLineNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SalesLineNo
		{
			get
			{
				return this._SalesLineNo;
			}
			set
			{
				if ((this._SalesLineNo != value))
				{
					this.OnSalesLineNoChanging(value);
					this.SendPropertyChanging();
					this._SalesLineNo = value;
					this.SendPropertyChanged("SalesLineNo");
					this.OnSalesLineNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingId", DbType="NVarChar(30)")]
		public string DrawingId
		{
			get
			{
				return this._DrawingId;
			}
			set
			{
				if ((this._DrawingId != value))
				{
					this.OnDrawingIdChanging(value);
					this.SendPropertyChanging();
					this._DrawingId = value;
					this.SendPropertyChanged("DrawingId");
					this.OnDrawingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DrawingRevision", DbType="NVarChar(10)")]
		public string DrawingRevision
		{
			get
			{
				return this._DrawingRevision;
			}
			set
			{
				if ((this._DrawingRevision != value))
				{
					this.OnDrawingRevisionChanging(value);
					this.SendPropertyChanging();
					this._DrawingRevision = value;
					this.SendPropertyChanged("DrawingRevision");
					this.OnDrawingRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnSalesOrder", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnSalesOrders.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnSalesOrders.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnHeader")]
	public partial class EcnHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _EcnNumber;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private string _LastModifiedBy;
		
		private string _CreatedBy;
		
		private string _PartNumber;
		
		private string _PartDescription;
		
		private string _CustomerPartNumber;
		
		private string _Customer;
		
		private string _PssRevision;
		
		private string _CustomerRevision;
		
		private string _Status;
		
		private EntitySet<EcnCheck> _EcnChecks;
		
		private EntitySet<EcnInventoryOnHand> _EcnInventoryOnHands;
		
		private EntitySet<EcnPurchaseOrder> _EcnPurchaseOrders;
		
		private EntitySet<EcnSalesOrder> _EcnSalesOrders;
		
		private EntitySet<EcnOpenWorkOrder> _EcnOpenWorkOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEcnNumberChanging(int value);
    partial void OnEcnNumberChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnLastModifiedByChanging(string value);
    partial void OnLastModifiedByChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnPartNumberChanging(string value);
    partial void OnPartNumberChanged();
    partial void OnPartDescriptionChanging(string value);
    partial void OnPartDescriptionChanged();
    partial void OnCustomerPartNumberChanging(string value);
    partial void OnCustomerPartNumberChanged();
    partial void OnCustomerChanging(string value);
    partial void OnCustomerChanged();
    partial void OnPssRevisionChanging(string value);
    partial void OnPssRevisionChanged();
    partial void OnCustomerRevisionChanging(string value);
    partial void OnCustomerRevisionChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public EcnHeader()
		{
			this._EcnChecks = new EntitySet<EcnCheck>(new Action<EcnCheck>(this.attach_EcnChecks), new Action<EcnCheck>(this.detach_EcnChecks));
			this._EcnInventoryOnHands = new EntitySet<EcnInventoryOnHand>(new Action<EcnInventoryOnHand>(this.attach_EcnInventoryOnHands), new Action<EcnInventoryOnHand>(this.detach_EcnInventoryOnHands));
			this._EcnPurchaseOrders = new EntitySet<EcnPurchaseOrder>(new Action<EcnPurchaseOrder>(this.attach_EcnPurchaseOrders), new Action<EcnPurchaseOrder>(this.detach_EcnPurchaseOrders));
			this._EcnSalesOrders = new EntitySet<EcnSalesOrder>(new Action<EcnSalesOrder>(this.attach_EcnSalesOrders), new Action<EcnSalesOrder>(this.detach_EcnSalesOrders));
			this._EcnOpenWorkOrders = new EntitySet<EcnOpenWorkOrder>(new Action<EcnOpenWorkOrder>(this.attach_EcnOpenWorkOrders), new Action<EcnOpenWorkOrder>(this.detach_EcnOpenWorkOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnNumber", DbType="Int NOT NULL")]
		public int EcnNumber
		{
			get
			{
				return this._EcnNumber;
			}
			set
			{
				if ((this._EcnNumber != value))
				{
					this.OnEcnNumberChanging(value);
					this.SendPropertyChanging();
					this._EcnNumber = value;
					this.SendPropertyChanged("EcnNumber");
					this.OnEcnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifiedBy", DbType="NVarChar(50)")]
		public string LastModifiedBy
		{
			get
			{
				return this._LastModifiedBy;
			}
			set
			{
				if ((this._LastModifiedBy != value))
				{
					this.OnLastModifiedByChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedBy = value;
					this.SendPropertyChanged("LastModifiedBy");
					this.OnLastModifiedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNumber", DbType="NVarChar(160)")]
		public string PartNumber
		{
			get
			{
				return this._PartNumber;
			}
			set
			{
				if ((this._PartNumber != value))
				{
					this.OnPartNumberChanging(value);
					this.SendPropertyChanging();
					this._PartNumber = value;
					this.SendPropertyChanged("PartNumber");
					this.OnPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartDescription", DbType="NVarChar(250)")]
		public string PartDescription
		{
			get
			{
				return this._PartDescription;
			}
			set
			{
				if ((this._PartDescription != value))
				{
					this.OnPartDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PartDescription = value;
					this.SendPropertyChanged("PartDescription");
					this.OnPartDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPartNumber", DbType="NVarChar(160)")]
		public string CustomerPartNumber
		{
			get
			{
				return this._CustomerPartNumber;
			}
			set
			{
				if ((this._CustomerPartNumber != value))
				{
					this.OnCustomerPartNumberChanging(value);
					this.SendPropertyChanging();
					this._CustomerPartNumber = value;
					this.SendPropertyChanged("CustomerPartNumber");
					this.OnCustomerPartNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer", DbType="NVarChar(41)")]
		public string Customer
		{
			get
			{
				return this._Customer;
			}
			set
			{
				if ((this._Customer != value))
				{
					this.OnCustomerChanging(value);
					this.SendPropertyChanging();
					this._Customer = value;
					this.SendPropertyChanged("Customer");
					this.OnCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PssRevision", DbType="NVarChar(10)")]
		public string PssRevision
		{
			get
			{
				return this._PssRevision;
			}
			set
			{
				if ((this._PssRevision != value))
				{
					this.OnPssRevisionChanging(value);
					this.SendPropertyChanging();
					this._PssRevision = value;
					this.SendPropertyChanged("PssRevision");
					this.OnPssRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerRevision", DbType="NVarChar(50)")]
		public string CustomerRevision
		{
			get
			{
				return this._CustomerRevision;
			}
			set
			{
				if ((this._CustomerRevision != value))
				{
					this.OnCustomerRevisionChanging(value);
					this.SendPropertyChanging();
					this._CustomerRevision = value;
					this.SendPropertyChanged("CustomerRevision");
					this.OnCustomerRevisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnCheck", Storage="_EcnChecks", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnCheck> EcnChecks
		{
			get
			{
				return this._EcnChecks;
			}
			set
			{
				this._EcnChecks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnInventoryOnHand", Storage="_EcnInventoryOnHands", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnInventoryOnHand> EcnInventoryOnHands
		{
			get
			{
				return this._EcnInventoryOnHands;
			}
			set
			{
				this._EcnInventoryOnHands.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnPurchaseOrder", Storage="_EcnPurchaseOrders", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnPurchaseOrder> EcnPurchaseOrders
		{
			get
			{
				return this._EcnPurchaseOrders;
			}
			set
			{
				this._EcnPurchaseOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnSalesOrder", Storage="_EcnSalesOrders", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnSalesOrder> EcnSalesOrders
		{
			get
			{
				return this._EcnSalesOrders;
			}
			set
			{
				this._EcnSalesOrders.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnOpenWorkOrder", Storage="_EcnOpenWorkOrders", ThisKey="Id", OtherKey="EcnId")]
		public EntitySet<EcnOpenWorkOrder> EcnOpenWorkOrders
		{
			get
			{
				return this._EcnOpenWorkOrders;
			}
			set
			{
				this._EcnOpenWorkOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnChecks(EcnCheck entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnInventoryOnHands(EcnInventoryOnHand entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnInventoryOnHands(EcnInventoryOnHand entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnPurchaseOrders(EcnPurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnPurchaseOrders(EcnPurchaseOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnSalesOrders(EcnSalesOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnSalesOrders(EcnSalesOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
		
		private void attach_EcnOpenWorkOrders(EcnOpenWorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = this;
		}
		
		private void detach_EcnOpenWorkOrders(EcnOpenWorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.EcnHeader = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EcnOpenWorkOrders")]
	public partial class EcnOpenWorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EcnId;
		
		private string _WorkId;
		
		private string _ChangeDescription;
		
		private System.Nullable<System.DateTime> _DateChangeMade;
		
		private System.Nullable<System.DateTime> _ChangeMadeBy;
		
		private EntityRef<EcnHeader> _EcnHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEcnIdChanging(int value);
    partial void OnEcnIdChanged();
    partial void OnWorkIdChanging(string value);
    partial void OnWorkIdChanged();
    partial void OnChangeDescriptionChanging(string value);
    partial void OnChangeDescriptionChanged();
    partial void OnDateChangeMadeChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChangeMadeChanged();
    partial void OnChangeMadeByChanging(System.Nullable<System.DateTime> value);
    partial void OnChangeMadeByChanged();
    #endregion
		
		public EcnOpenWorkOrder()
		{
			this._EcnHeader = default(EntityRef<EcnHeader>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EcnId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EcnId
		{
			get
			{
				return this._EcnId;
			}
			set
			{
				if ((this._EcnId != value))
				{
					if (this._EcnHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEcnIdChanging(value);
					this.SendPropertyChanging();
					this._EcnId = value;
					this.SendPropertyChanged("EcnId");
					this.OnEcnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkId", DbType="NVarChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string WorkId
		{
			get
			{
				return this._WorkId;
			}
			set
			{
				if ((this._WorkId != value))
				{
					this.OnWorkIdChanging(value);
					this.SendPropertyChanging();
					this._WorkId = value;
					this.SendPropertyChanged("WorkId");
					this.OnWorkIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeDescription", DbType="NVarChar(250)")]
		public string ChangeDescription
		{
			get
			{
				return this._ChangeDescription;
			}
			set
			{
				if ((this._ChangeDescription != value))
				{
					this.OnChangeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ChangeDescription = value;
					this.SendPropertyChanged("ChangeDescription");
					this.OnChangeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateChangeMade", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateChangeMade
		{
			get
			{
				return this._DateChangeMade;
			}
			set
			{
				if ((this._DateChangeMade != value))
				{
					this.OnDateChangeMadeChanging(value);
					this.SendPropertyChanging();
					this._DateChangeMade = value;
					this.SendPropertyChanged("DateChangeMade");
					this.OnDateChangeMadeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChangeMadeBy", DbType="DateTime")]
		public System.Nullable<System.DateTime> ChangeMadeBy
		{
			get
			{
				return this._ChangeMadeBy;
			}
			set
			{
				if ((this._ChangeMadeBy != value))
				{
					this.OnChangeMadeByChanging(value);
					this.SendPropertyChanging();
					this._ChangeMadeBy = value;
					this.SendPropertyChanged("ChangeMadeBy");
					this.OnChangeMadeByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EcnHeader_EcnOpenWorkOrder", Storage="_EcnHeader", ThisKey="EcnId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EcnHeader EcnHeader
		{
			get
			{
				return this._EcnHeader.Entity;
			}
			set
			{
				EcnHeader previousValue = this._EcnHeader.Entity;
				if (((previousValue != value) 
							|| (this._EcnHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EcnHeader.Entity = null;
						previousValue.EcnOpenWorkOrders.Remove(this);
					}
					this._EcnHeader.Entity = value;
					if ((value != null))
					{
						value.EcnOpenWorkOrders.Add(this);
						this._EcnId = value.Id;
					}
					else
					{
						this._EcnId = default(int);
					}
					this.SendPropertyChanged("EcnHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
